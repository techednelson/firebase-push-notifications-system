var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.708,1,2.229]],["body/modules/AppModule.html",[0,2.604,1,4.16,2,1.783,3,1.783,4,2.144,5,2.144,6,2.144,7,2.965,8,2.144,9,2.72,10,2.72,11,3.312,12,0.027,13,3.616,14,2.965,15,2.144,16,1.947,17,0.204,18,0.174,19,0.174,20,3.221,21,1.951,22,3.399,23,3.306,24,0.996,25,3.221,26,4.456,27,5.512,28,0.404,29,3.221,30,1.066,31,1.066,32,0.299,33,0.996,34,3.221,35,0.996,36,2.72,37,0.655,38,4.456,39,3.221,40,0.757,41,2.39,42,1.41,43,3.221,44,4.456,45,2.39,46,2.39,47,3.221,48,2.72,49,1.947,50,1.815,51,1.41,52,3.221,53,1.41,54,1.947,55,2.39,56,3.221,57,3.221,58,2.72,59,3.221,60,3.221,61,1.642,62,3.221,63,3.221,64,3.221,65,2.72,66,0.204,67,0.112,68,2.39,69,4.456,70,3.221,71,5.108,72,4.313,73,3.221,74,5.108,75,5.108,76,3.221,77,3.221,78,3.221,79,0.012,80,0.017,81,0.012]],["title/controllers/AuthController.html",[82,1.272,83,2.229]],["body/controllers/AuthController.html",[12,0.027,16,2.437,17,0.177,18,0.151,19,0.151,21,1.225,24,1.246,28,0.649,30,1.712,31,1.712,32,0.48,33,1.6,35,1.6,37,0.59,40,0.657,66,0.177,67,0.097,79,0.011,80,0.015,81,0.011,82,1.062,83,2.683,84,2.362,85,1.861,86,2.797,87,0.231,88,2.332,89,3.993,90,4.033,91,2.864,92,3.405,93,2.362,94,3.972,95,4.984,96,1.6,97,4.033,98,2.797,99,2.025,100,2.797,101,2.797,102,2.797,103,2.797,104,2.797,105,2.797,106,2.362,107,3.454,108,4.033,109,2.797,110,1.062,111,2.362,112,2.075,113,3.147,114,3.84,115,1.69,116,2.231,117,2.075,118,2.362,119,2.362,120,1.861,121,3.405,122,2.437,123,1.548,124,1.319,125,1.139,126,2.797,127,1.861,128,1.548,129,2.797,130,1.712,131,1.795,132,2.797,133,2.797,134,2.797,135,2.797,136,2.797,137,1.69,138,2.797,139,2.797,140,1.062,141,0.529,142,2.362,143,2.797,144,2.362,145,2.075,146,2.797,147,2.362]],["title/modules/AuthModule.html",[0,1.708,11,1.854]],["body/modules/AuthModule.html",[0,2.66,2,1.857,3,1.857,4,2.232,5,2.232,6,2.232,7,3.472,8,3.472,11,3.672,12,0.027,14,3.049,15,2.232,16,2.027,17,0.212,18,0.181,19,0.181,21,2.006,23,2.489,37,0.661,40,0.788,41,2.489,42,1.469,53,1.469,54,2.027,65,2.833,66,0.212,67,0.117,79,0.013,80,0.018,81,0.013,83,3.472,91,1.857,116,3.109,117,2.489,121,3.869,125,1.866,148,2.833,149,2.833,150,2.833,151,3.982,152,3.982,153,3.355,154,3.355,155,4.582,156,1.857,157,3.355,158,2.489,159,4.582,160,3.355,161,3.355,162,1.857,163,1.188,164,3.355]],["title/injectables/AuthService.html",[116,1.58,165,0.787]],["body/injectables/AuthService.html",[12,0.027,17,0.088,18,0.075,19,0.075,24,0.722,28,0.672,30,1.685,31,1.685,32,0.472,33,1.574,35,1.618,37,0.526,40,0.327,42,0.61,49,2.134,53,2.473,54,0.843,61,1.192,66,0.088,67,0.048,72,2.982,79,0.005,80,0.009,81,0.005,87,0.115,88,2.336,89,2.548,91,1.294,92,1.974,93,1.177,94,3.163,95,4.055,99,1.805,106,1.974,107,2.573,111,1.177,113,2.008,114,2.239,116,1.103,118,1.177,119,1.177,123,0.772,125,0.952,130,1.632,131,2.075,140,2.248,141,1.083,142,1.974,144,1.177,145,2.621,147,1.974,158,1.034,163,1.251,165,0.549,166,0.61,167,1.177,168,2.337,169,3.532,170,2.669,171,3.018,172,2.337,173,3.532,174,2.337,175,3.018,176,2.239,177,3.018,178,2.337,179,1.192,180,1.034,181,1.955,182,4.522,183,1.394,184,1.734,185,2.337,186,2.419,187,1.394,188,2.621,189,1.252,190,1.394,191,1.394,192,2.306,193,2.008,194,1.394,195,2.337,196,1.394,197,4.524,198,1.394,199,1.394,200,2.337,201,1.394,202,1.394,203,1.394,204,1.394,205,1.394,206,3.934,207,1.394,208,2.337,209,1.394,210,1.394,211,1.034,212,3.018,213,1.177,214,1.034,215,0.843,216,0.568,217,1.974,218,1.034,219,1.034,220,1.294,221,2.982,222,2.177,223,2.17,224,1.394,225,1.177,226,1.394,227,1.394,228,0.928,229,1.394,230,1.394,231,1.394,232,2.337,233,1.394,234,1.394,235,0.928,236,0.928,237,1.034,238,2.337,239,2.337,240,1.394,241,2.337,242,2.337,243,2.548,244,1.394,245,1.394,246,2.337,247,2.337,248,1.177,249,2.337,250,2.337,251,1.394,252,1.177,253,2.337,254,1.974,255,1.394,256,2.337,257,3.532,258,2.337,259,2.337,260,1.974,261,2.337,262,2.337,263,2.337,264,1.394,265,1.394,266,1.394,267,1.394,268,1.394,269,1.394,270,1.394,271,1.394,272,1.394,273,1.394,274,2.337,275,1.394,276,1.394,277,1.394,278,2.337,279,2.337,280,1.177,281,1.034,282,1.394,283,1.394,284,1.394,285,1.394,286,1.394]],["title/guards/BasicAuthGuard.html",[287,2.486,288,2.229]],["body/guards/BasicAuthGuard.html",[12,0.027,17,0.227,18,0.194,19,0.194,24,1.482,28,0.601,30,1.586,31,1.586,32,0.445,33,1.482,35,1.482,37,0.557,40,0.842,66,0.227,67,0.125,68,2.661,79,0.014,80,0.018,81,0.014,87,0.296,94,3.734,99,1.698,123,1.985,130,1.586,140,2.05,141,0.906,165,1.126,176,4.006,189,0.73,220,2.653,288,3.19,289,3.587,290,4.559,291,3.029,292,6.006,293,4.794,294,3.587,295,4.866,296,3.587,297,4.794,298,2.938,299,5.399,300,4.794,301,3.587,302,3.587,303,4.794,304,3.587,305,3.587,306,3.587,307,3.587,308,3.587,309,3.587,310,3.587,311,3.587,312,3.587]],["title/modules/FcmAdminServerModule.html",[0,1.708,13,2.025]],["body/modules/FcmAdminServerModule.html",[0,2.711,2,1.926,3,1.926,4,2.316,5,2.316,6,2.316,7,3.539,8,2.316,11,3.39,12,0.027,13,4.006,14,3.126,15,2.316,16,2.104,17,0.22,18,0.188,19,0.188,21,2.057,23,3.486,37,0.679,40,0.818,41,2.583,42,1.524,48,2.94,50,1.914,51,2.057,66,0.22,67,0.121,79,0.013,80,0.018,81,0.013,313,2.94,314,2.94,315,3.481,316,3.39,317,3.123,318,3.123,319,3.481,320,3.539,321,3.539,322,3.539,323,1.642,324,2.94,325,3.481,326,3.481,327,3.481,328,2.94,329,2.94,330,2.94,331,2.395,332,2.94,333,3.481]],["title/controllers/FcmController.html",[82,1.272,321,2.229]],["body/controllers/FcmController.html",[12,0.027,17,0.159,18,0.136,19,0.136,21,1.103,24,1.155,28,0.66,30,1.74,31,1.74,32,0.488,33,1.626,35,1.626,37,0.605,40,0.592,49,1.523,50,2.244,51,2.412,66,0.159,67,0.088,79,0.01,80,0.014,81,0.01,82,0.957,85,1.677,87,0.208,88,2.439,96,1.626,99,2.156,110,2.092,112,1.869,115,1.523,122,1.523,124,1.189,125,1.026,127,1.677,128,1.394,130,1.74,131,1.997,137,2.976,288,1.677,316,2.464,321,2.486,329,2.128,334,2.128,335,4.453,336,3.76,337,3.76,338,3.76,339,3.76,340,2.52,341,3.817,342,2.52,343,3.736,344,2.52,345,2.52,346,2.128,347,2.52,348,2.52,349,2.52,350,3.446,351,2.52,352,2.52,353,2.52,354,2.726,355,2.52,356,2.52,357,4.453,358,2.128,359,3.329,360,2.52,361,2.52,362,2.128,363,1.677,364,3.654,365,2.128,366,2.128,367,1.677,368,2.52,369,2.52,370,2.128,371,1.869,372,2.52,373,2.52,374,4.441,375,2.52,376,2.52,377,2.128,378,2.52,379,2.52,380,2.52,381,2.52,382,2.52,383,2.52,384,2.52]],["title/injectables/FcmService.html",[165,0.787,316,1.854]],["body/injectables/FcmService.html",[12,0.027,17,0.077,18,0.066,19,0.066,24,0.643,28,0.585,30,1.4,31,1.4,32,0.504,33,1.308,35,1.308,36,1.757,37,0.54,40,0.285,50,2.03,51,2.041,61,1.061,66,0.077,67,0.042,79,0.005,80,0.008,81,0.005,87,0.1,88,2.151,99,1.712,110,1.892,128,1.151,130,1.4,131,2.486,140,2.095,141,1.106,163,1.287,165,0.489,166,0.532,170,2.377,176,2.024,179,1.061,213,1.026,216,0.495,222,2.58,223,2.377,225,1.026,228,2.971,235,2.971,236,3.814,280,1.026,281,0.902,298,1.391,316,1.151,317,2.019,318,2.158,323,2.351,331,2.019,336,2.303,337,2.303,338,2.303,339,2.303,341,3.162,346,1.026,350,1.952,354,2.343,358,1.026,359,2.558,363,0.809,364,2.397,365,1.026,366,1.026,370,1.026,385,1.026,386,2.728,387,3.23,388,2.728,389,1.215,390,3.575,391,1.215,392,1.215,393,1.215,394,1.215,395,1.215,396,1.215,397,3.23,398,1.215,399,1.815,400,1.215,401,1.215,402,2.728,403,1.215,404,1.215,405,2.728,406,1.215,407,0.902,408,4.233,409,2.728,410,0.902,411,1.215,412,1.215,413,1.215,414,0.734,415,1.026,416,2.938,417,1.215,418,2.08,419,1.215,420,1.215,421,1.215,422,1.215,423,1.215,424,1.215,425,1.215,426,1.215,427,1.215,428,1.215,429,2.331,430,1.215,431,2.817,432,3.067,433,3.067,434,3.067,435,3.067,436,2.08,437,1.215,438,3.77,439,2.08,440,3.77,441,2.08,442,3.067,443,3.067,444,1.215,445,1.215,446,1.026,447,1.215,448,0.809,449,1.215,450,1.026,451,1.215,452,1.215,453,1.215,454,1.215,455,1.215,456,2.351,457,2.303,458,2.08,459,3.632,460,2.728,461,4.208,462,2.728,463,2.728,464,1.215,465,4.464,466,1.757,467,1.215,468,1.215,469,1.215,470,2.08,471,1.757,472,0.902,473,1.215,474,1.215,475,1.215]],["title/injectables/JwtAccessTokenGuard.html",[124,1.58,165,0.787]],["body/injectables/JwtAccessTokenGuard.html",[12,0.026,17,0.304,18,0.26,19,0.26,37,0.596,40,1.13,66,0.304,67,0.167,79,0.018,80,0.022,81,0.018,124,2.725,125,2.353,156,2.664,162,2.664,163,1.705,165,1.357,166,2.107,476,2.909,477,3.571,478,4.878,479,3.571,480,3.203]],["title/injectables/JwtAccessTokenStrategy.html",[151,2.025,165,0.787]],["body/injectables/JwtAccessTokenStrategy.html",[12,0.027,17,0.208,18,0.178,19,0.178,24,1.396,28,0.567,30,1.495,31,1.495,32,0.419,33,1.396,35,1.016,37,0.649,40,0.772,42,1.439,53,2.434,54,1.986,66,0.208,67,0.114,79,0.013,80,0.017,81,0.013,87,0.271,88,1.96,94,3.359,99,1.6,123,1.819,125,2.374,130,1.087,131,1.248,140,1.715,141,0.854,151,2.73,156,1.819,162,2.5,163,1.6,165,1.061,166,1.439,170,1.676,179,2.303,180,2.439,181,3.076,184,3.352,186,2.834,188,3.352,214,3.352,215,1.986,216,1.339,218,2.439,219,2.439,221,2.775,222,1.819,223,1.676,252,2.775,472,2.439,476,3.12,480,2.187,481,2.439,482,3.352,483,3.287,484,4.518,485,3.287,486,3.815,487,3.815,488,2.775,489,2.439,490,2.775,491,2.775,492,2.775,493,2.775,494,2.775,495,2.775,496,2.775]],["title/interfaces/JwtPayload.html",[186,1.708,497,2.025]],["body/interfaces/JwtPayload.html",[12,0.026,17,0.302,18,0.258,19,0.258,32,0.443,66,0.364,79,0.018,80,0.022,81,0.018,87,0.395,110,1.814,141,1.211,186,2.932,189,1.334,456,2.254,497,3.476,498,3.545,499,3.545,500,1.777,501,3.179]],["title/injectables/JwtRefreshTokenGuard.html",[120,2.229,165,0.787]],["body/injectables/JwtRefreshTokenGuard.html",[12,0.026,17,0.304,18,0.26,19,0.26,37,0.596,40,1.13,66,0.304,67,0.167,79,0.018,80,0.022,81,0.018,91,3.197,120,3.844,156,2.664,162,2.664,163,1.705,165,1.357,166,2.107,476,2.909,477,3.571,478,4.878,479,3.571,480,3.203]],["title/injectables/JwtRefreshTokenStrategy.html",[152,2.025,165,0.787]],["body/injectables/JwtRefreshTokenStrategy.html",[12,0.027,17,0.191,18,0.163,19,0.163,24,1.318,28,0.535,30,1.411,31,1.411,32,0.396,33,1.318,35,0.935,37,0.646,40,0.711,42,1.325,53,2.348,54,1.828,61,1.543,66,0.191,67,0.105,79,0.012,80,0.016,81,0.012,87,0.25,88,1.875,91,3.247,94,3.782,99,1.511,116,2.844,117,2.245,123,1.675,130,1.001,131,1.149,140,1.875,141,0.806,152,2.577,156,1.675,162,2.36,163,1.75,165,1.002,166,1.325,170,2.174,179,2.174,180,2.245,181,2.968,184,3.164,186,2.734,188,3.979,197,3.602,214,3.164,215,1.828,216,1.233,218,2.245,219,2.245,222,1.675,223,1.543,248,2.555,472,2.245,476,2.985,480,2.013,481,2.245,482,3.164,486,3.602,487,3.602,488,2.555,489,2.245,490,2.555,491,2.555,492,2.555,493,3.602,494,3.602,495,2.555,496,2.555,502,3.026,503,4.265,504,3.026,505,3.026,506,3.026,507,3.026,508,3.026,509,3.026]],["title/classes/MatchConstraint.html",[67,0.116,510,2.229]],["body/classes/MatchConstraint.html",[12,0.027,17,0.242,18,0.207,19,0.207,24,1.547,28,0.48,30,1.267,31,1.656,32,0.355,33,1.184,35,1.184,37,0.396,66,0.317,67,0.174,68,3.715,79,0.015,80,0.019,81,0.015,87,0.316,130,1.656,140,2.117,189,1.019,298,1.953,448,3.332,482,3.715,510,3.711,511,1.184,512,2.843,513,5.577,514,5.007,515,5.577,516,5.914,517,3.831,518,4.228,519,4.994,520,5.007,521,2.192,522,3.332,523,4.228,524,3.235,525,4.228,526,3.235,527,3.235,528,3.235,529,3.235,530,3.831,531,3.831,532,5.007,533,3.831,534,3.831]],["title/interfaces/MessagePayload.html",[497,2.025,501,2.229]],["body/interfaces/MessagePayload.html",[12,0.026,17,0.295,18,0.252,19,0.252,32,0.525,66,0.358,79,0.018,80,0.022,81,0.018,87,0.385,110,2.41,141,0.881,186,2.375,189,1.363,456,2.995,497,3.422,498,3.456,499,3.456,500,1.75,501,3.769]],["title/classes/MulticastRequestDto.html",[67,0.116,350,2.025]],["body/classes/MulticastRequestDto.html",[12,0.026,17,0.276,18,0.235,19,0.235,28,0.682,32,0.504,37,0.561,66,0.276,67,0.189,79,0.017,80,0.021,81,0.017,87,0.36,96,1.68,189,1.107,350,3.286,354,3.28,364,3.235,399,3.943,466,5.004,500,1.68,511,1.347,521,1.909,535,5.004,536,2.413,537,5.438,538,3.681,539,4.36,540,4.36,541,5.926,542,3.681,543,5.438]],["title/controllers/NextClientController.html",[22,2.229,82,1.272]],["body/controllers/NextClientController.html",[12,0.027,17,0.17,18,0.145,19,0.145,21,1.174,22,2.602,24,1.209,28,0.636,30,1.679,31,1.679,32,0.471,33,1.568,35,1.568,37,0.557,40,0.63,45,1.989,55,1.989,66,0.17,67,0.093,79,0.01,80,0.015,81,0.01,82,1.485,87,0.221,88,2.403,96,1.568,99,1.996,113,4.346,114,4.959,115,1.62,116,2.178,122,1.62,124,1.265,125,1.092,128,2.164,131,2.048,137,2.79,140,1.018,170,1.994,179,1.367,323,2.178,367,1.784,399,3.072,544,4.556,545,2.264,546,4.617,547,4.617,548,3.911,549,4.617,550,2.681,551,6.391,552,6.391,553,3.911,554,3.072,555,2.681,556,2.681,557,2.681,558,2.681,559,2.681,560,2.681,561,2.681,562,2.681,563,3.911,564,2.681,565,2.681,566,2.681,567,2.264,568,2.681,569,3.911,570,2.681,571,2.681,572,3.911,573,3.911,574,2.681,575,2.681]],["title/classes/Notification.html",[67,0.116,323,1.58]],["body/classes/Notification.html",[12,0.026,17,0.221,18,0.189,19,0.189,28,0.799,32,0.611,37,0.486,66,0.221,67,0.121,79,0.013,80,0.018,81,0.013,87,0.288,96,1.969,110,2.022,141,1.007,189,1.329,192,2.715,193,2.22,216,1.422,323,2.22,414,3.218,429,2.022,456,2.512,500,1.455,511,1.079,576,2.947,577,4.497,578,3.951,579,5.003,580,3.491,581,3.491,582,3.951,583,3.491,584,3.491,585,3.491,586,3.491,587,2.947,588,3.491,589,3.491,590,2.59,591,2.323,592,3.491]],["title/classes/NotificationResponseDto.html",[67,0.116,593,2.025]],["body/classes/NotificationResponseDto.html",[12,0.026,17,0.241,18,0.206,19,0.206,28,0.815,32,0.619,37,0.393,66,0.241,67,0.132,79,0.015,80,0.019,81,0.015,87,0.315,110,2.111,141,1.052,189,1.35,192,2.835,193,2.353,414,3.361,429,2.111,456,2.623,500,1.541,511,1.177,577,4.696,578,4.126,587,3.078,591,2.534,593,3.014,594,5.547,595,2.534,596,3.216,597,3.809,598,3.216,599,3.809,600,3.216,601,3.809,602,3.809,603,3.809]],["title/controllers/NotificationsController.html",[82,1.272,320,2.229]],["body/controllers/NotificationsController.html",[12,0.026,17,0.236,18,0.202,19,0.202,21,1.634,24,1.521,28,0.617,30,1.235,31,1.235,32,0.346,33,1.153,35,1.521,37,0.604,40,0.876,49,2.255,50,2.243,51,2.411,66,0.236,67,0.13,79,0.014,80,0.019,81,0.014,82,1.417,85,2.483,87,0.308,88,2.372,96,1.521,99,2.074,110,1.417,112,2.769,115,2.255,122,2.255,124,1.76,125,1.52,127,2.483,128,2.065,130,1.235,131,1.868,137,2.255,193,2.597,317,2.807,320,3.275,330,3.151,362,3.151,367,2.483,371,2.769,374,3.151,554,3.275,593,2.255,604,3.151,605,4.156,606,3.895,607,3.151,608,3.732,609,3.732,610,4.156,611,3.732,612,3.151,613,2.483,614,3.732,615,3.732,616,3.732,617,3.732]],["title/injectables/NotificationsService.html",[165,0.787,317,1.708]],["body/injectables/NotificationsService.html",[12,0.027,17,0.142,18,0.122,19,0.122,24,1.061,28,0.628,30,1.54,31,1.54,32,0.525,33,1.439,35,1.439,37,0.545,40,0.529,42,0.986,50,2.151,51,2.312,61,1.148,66,0.142,67,0.078,79,0.009,80,0.013,81,0.009,87,0.186,88,2.316,99,2.006,110,1.767,130,1.54,131,2.247,140,2.005,141,0.88,165,0.806,166,0.986,170,1.751,179,1.751,181,2.576,189,1.242,192,2.8,193,2.491,211,1.671,215,1.361,216,0.918,222,2.303,223,2.373,228,2.769,235,2.769,236,2.769,237,1.671,281,1.671,317,1.751,323,2.838,324,1.902,390,4.638,407,1.671,414,2.813,415,1.902,429,1.767,432,1.902,433,1.902,434,1.902,435,1.902,438,1.902,440,1.902,442,1.902,443,1.902,456,1.963,554,1.499,578,3.454,587,2.576,593,2.515,605,2.9,606,3.098,607,2.9,610,2.9,612,1.902,613,1.499,618,1.902,619,3.434,620,3.514,621,2.252,622,2.252,623,3.434,624,2.252,625,2.252,626,3.434,627,2.252,628,2.252,629,2.252,630,2.252,631,2.252,632,2.252,633,2.252,634,2.252,635,2.252,636,2.252,637,2.252,638,2.252,639,2.252,640,2.252,641,2.252,642,2.9,643,2.252,644,2.252,645,1.902,646,2.252,647,2.252,648,2.252]],["title/classes/SignInRequestDto.html",[67,0.116,649,2.486]],["body/classes/SignInRequestDto.html",[12,0.026,17,0.266,18,0.227,19,0.227,28,0.666,32,0.493,37,0.434,66,0.266,67,0.185,79,0.016,80,0.02,81,0.016,87,0.347,96,1.643,141,1.102,189,1.247,220,3.495,416,3.943,500,1.643,511,1.299,521,1.841,536,2.327,538,3.55,649,3.943,650,4.324,651,3.55,652,4.488,653,4.488,654,4.488,655,4.204,656,4.204,657,3.522,658,3.55,659,2.541,660,2.541,661,4.488,662,3.212,663,3.55]],["title/classes/SignUpDto.html",[67,0.116,107,2.025]],["body/classes/SignUpDto.html",[12,0.026,17,0.242,18,0.207,19,0.207,28,0.699,32,0.517,37,0.517,66,0.242,67,0.174,79,0.015,80,0.019,81,0.015,87,0.316,96,1.724,107,3.026,141,1.055,189,1.281,220,3.396,416,4.388,500,1.547,511,1.184,521,1.677,522,3.711,650,4.388,651,3.235,652,4.228,653,4.228,654,4.228,657,3.574,658,3.235,659,2.315,660,2.315,661,4.228,662,3.37,663,3.235,664,3.235,665,5.577,666,3.831,667,5.007,668,3.831,669,3.831,670,2.549,671,3.831,672,3.831,673,2.549,674,3.831]],["title/classes/SingleRequestDto.html",[67,0.116,354,1.854]],["body/classes/SingleRequestDto.html",[12,0.026,17,0.228,18,0.195,19,0.195,28,0.776,32,0.603,37,0.497,66,0.228,67,0.167,79,0.014,80,0.018,81,0.014,87,0.298,96,1.913,110,2.055,141,1.024,163,1.918,189,1.337,354,2.663,429,2.055,456,2.554,500,1.487,511,1.115,521,1.579,536,1.996,587,2.996,591,2.4,657,3.928,659,2.18,660,2.18,662,2.908,670,3.202,673,3.603,675,5.336,676,3.046,677,3.046,678,3.046,679,3.607,680,3.046,681,3.046,682,3.046,683,3.046,684,3.046,685,3.046,686,3.046]],["title/classes/Subscriber.html",[67,0.116,331,1.708]],["body/classes/Subscriber.html",[12,0.026,17,0.25,18,0.213,19,0.213,28,0.777,32,0.575,37,0.408,66,0.25,67,0.137,79,0.015,80,0.02,81,0.015,87,0.326,96,1.915,141,1.07,163,2.005,189,1.292,192,2.885,193,2.408,216,1.608,298,2.603,331,2.603,429,2.148,431,3.419,500,1.578,511,1.22,579,4.907,582,4.198,590,2.929,687,3.334,688,3.948,689,3.948,690,3.948,691,3.948,692,3.948,693,3.334,694,3.948,695,3.334]],["title/controllers/SubscribersController.html",[82,1.272,322,2.229]],["body/controllers/SubscribersController.html",[12,0.027,17,0.241,18,0.206,19,0.206,21,1.668,24,1.541,28,0.625,35,1.541,37,0.632,40,0.894,49,2.302,50,2.265,51,2.435,66,0.241,67,0.132,79,0.015,80,0.019,81,0.015,82,1.446,85,2.534,87,0.315,88,2.386,96,1.541,99,2.09,115,2.302,122,2.302,124,1.797,125,1.551,127,2.534,128,2.108,130,1.65,131,1.893,137,2.302,318,2.835,322,3.319,328,3.216,363,2.534,367,2.534,371,2.826,399,3.319,606,3.926,613,3.319,696,3.216,697,4.983,698,3.809,699,4.988,700,3.809,701,2.302,702,2.302,703,3.216,704,3.809,705,3.809]],["title/injectables/SubscribersService.html",[165,0.787,318,1.708]],["body/injectables/SubscribersService.html",[12,0.027,17,0.141,18,0.12,19,0.12,24,1.052,28,0.659,30,1.53,31,1.53,32,0.429,33,1.43,35,1.54,37,0.543,40,0.523,42,0.974,50,2.228,51,2.394,61,2.106,66,0.141,67,0.077,79,0.009,80,0.013,81,0.009,87,0.184,88,2.385,95,1.651,99,2.09,130,1.739,131,1.892,140,1.892,141,1.066,163,1.639,165,0.799,166,0.974,170,1.135,179,1.735,181,2.56,189,1.279,211,1.651,215,1.345,216,0.907,222,2.758,223,2.788,228,3.078,235,3.078,236,3.078,237,1.651,298,2.106,318,1.735,331,3.102,332,1.879,363,1.481,377,2.873,407,1.651,429,1.892,431,3.176,446,1.879,450,1.879,606,3.078,613,2.264,620,3.488,642,3.906,645,1.879,697,3.906,701,2.496,702,2.056,703,1.879,706,1.879,707,4.131,708,3.403,709,2.225,710,2.225,711,3.403,712,2.225,713,2.225,714,2.225,715,2.225,716,2.225,717,2.225,718,3.403,719,2.225,720,2.225,721,2.225,722,3.403,723,3.403,724,2.225,725,2.225,726,2.225,727,2.225,728,2.225,729,2.225,730,3.403,731,2.225,732,2.225,733,2.225,734,3.403,735,2.225,736,2.225,737,2.225,738,2.225,739,2.225]],["title/classes/SubscriptionRequestDto.html",[67,0.116,341,2.025]],["body/classes/SubscriptionRequestDto.html",[12,0.026,17,0.251,18,0.215,19,0.215,28,0.752,32,0.556,33,1.584,37,0.41,66,0.251,67,0.178,79,0.015,80,0.02,81,0.015,87,0.328,96,1.853,141,1.073,163,2.01,189,1.294,298,2.613,341,3.097,429,2.155,431,3.429,500,1.584,511,1.228,521,1.739,536,2.198,657,3.624,659,2.4,660,2.4,662,2.4,670,2.643,673,2.643,740,4.605,741,5.675,742,3.972,743,5.126,744,3.972,745,3.972,746,3.972,747,5.675]],["title/classes/SubscriptionResponseDto.html",[67,0.116,701,2.025]],["body/classes/SubscriptionResponseDto.html",[12,0.026,17,0.269,18,0.23,19,0.23,28,0.795,32,0.588,66,0.269,67,0.148,79,0.016,80,0.021,81,0.016,87,0.352,141,1.109,163,2.077,189,1.318,192,2.989,193,2.528,298,2.732,429,2.226,431,3.543,500,1.656,511,1.316,595,2.834,596,3.597,598,3.597,600,3.597,701,3.238,740,4.802,748,3.597,749,4.259]],["title/classes/TopicRequestDto.html",[67,0.116,359,2.025]],["body/classes/TopicRequestDto.html",[12,0.026,17,0.237,18,0.203,19,0.203,28,0.764,32,0.6,37,0.51,66,0.237,67,0.172,79,0.014,80,0.019,81,0.014,87,0.31,96,1.884,110,2.096,141,1.044,189,1.318,359,2.985,429,2.096,456,2.605,500,1.527,511,1.16,521,1.643,536,2.077,587,3.056,591,2.498,657,3.856,659,2.268,660,2.268,662,2.985,670,3.287,673,3.674,676,3.17,677,3.17,678,3.17,680,3.17,681,3.17,682,3.17,683,3.17,684,3.17,685,3.17,686,3.17,750,5.285]],["title/classes/TopicsResponseDto.html",[67,0.116,702,2.025]],["body/classes/TopicsResponseDto.html",[12,0.025,17,0.31,18,0.265,19,0.265,28,0.615,32,0.455,66,0.31,67,0.17,79,0.019,80,0.022,81,0.019,87,0.405,189,1.189,500,1.806,511,1.516,595,3.263,702,3.53,748,4.141,751,4.933,752,6.24]],["title/classes/User.html",[53,1.467,67,0.116]],["body/classes/User.html",[12,0.026,17,0.258,18,0.22,19,0.22,28,0.759,32,0.561,37,0.42,53,2.28,66,0.258,67,0.142,79,0.016,80,0.02,81,0.016,87,0.336,96,1.87,141,1.086,189,1.303,192,2.928,193,2.457,216,1.659,220,3.178,243,4.849,500,1.61,511,1.258,579,4.826,582,4.26,590,3.021,693,3.438,695,3.438,753,3.438,754,5.742,755,4.072,756,4.072,757,4.072,758,4.072,759,4.072]],["title/coverage.html",[760,3.396]],["body/coverage.html",[12,0.026,19,0.146,22,1.803,32,0.251,46,2.01,50,2.303,51,2.475,53,1.186,67,0.223,79,0.01,80,0.015,81,0.01,82,2.057,83,1.803,84,2.288,91,2.181,107,1.637,116,1.278,120,1.803,124,1.278,125,1.605,151,1.637,152,1.637,165,1.404,167,2.288,186,1.381,223,1.381,287,2.01,288,1.803,290,2.288,291,2.288,316,1.499,317,1.381,318,1.381,320,1.803,321,1.803,322,1.803,323,1.278,331,1.381,334,2.288,341,1.637,350,1.637,354,1.499,359,1.637,385,2.288,476,3.082,477,2.924,481,2.924,497,2.381,499,2.924,501,1.803,510,1.803,512,2.924,522,1.803,535,2.288,536,2.998,544,2.288,545,2.288,576,2.288,593,1.637,594,2.288,595,3.09,604,2.288,618,2.288,649,2.01,650,2.924,664,2.288,675,2.288,687,2.288,696,2.288,701,1.637,702,1.637,706,2.288,740,2.924,750,2.288,751,2.288,753,2.288,760,2.01,761,2.709,762,2.709,763,2.709,764,6.876,765,5.099,766,2.709,767,2.288,768,2.288,769,5.099,770,2.288,771,5.654,772,5.978,773,3.328,774,2.288,775,4.644,776,2.709,777,3.941,778,5.418,779,4.644,780,2.709,781,2.709]],["title/dependencies.html",[3,2.231,782,2.795]],["body/dependencies.html",[3,1.916,12,0.027,40,0.813,42,1.516,45,2.569,50,1.41,55,3.473,58,2.924,67,0.163,79,0.013,80,0.018,81,0.013,123,2.591,145,3.473,156,1.916,158,2.569,162,1.916,216,1.41,217,2.924,254,3.953,410,3.473,489,3.473,521,1.516,783,5.303,784,3.463,785,3.463,786,3.463,787,3.463,788,3.463,789,4.681,790,3.463,791,5.303,792,3.463,793,3.463,794,3.463,795,3.463,796,3.463,797,3.463,798,3.463,799,3.463,800,3.463,801,3.463,802,3.463,803,3.463,804,3.463,805,3.463,806,3.463,807,3.463,808,3.463,809,4.681,810,3.463,811,3.463,812,3.463,813,3.463,814,3.463,815,3.463,816,3.463,817,3.463,818,3.463,819,3.463,820,3.463,821,3.463,822,3.463,823,3.463,824,3.463,825,2.924,826,3.463,827,3.463,828,3.463,829,3.463,830,3.463,831,5.303,832,4.681,833,3.463,834,3.463,835,3.463,836,3.463,837,3.463,838,3.463,839,3.463,840,3.463,841,3.463,842,3.463,843,3.463]],["title/miscellaneous/enumerations.html",[844,1.86,845,3.404]],["body/miscellaneous/enumerations.html",[12,0.026,79,0.018,80,0.022,81,0.018,87,0.392,414,3.46,429,2.174,448,4.421,471,4.835,542,4.835,587,3.169,844,3.156,845,4.005,846,5.726,847,4.743,848,5.726,849,5.726,850,5.726]],["title/index.html",[87,0.231,851,2.795,852,2.795]],["body/index.html",[12,0.026,18,0.204,79,0.015,80,0.019,81,0.015,181,2.095,260,3.197,410,3.686,461,4.195,554,3.306,760,2.809,853,3.786,854,3.786,855,4.968,856,3.786,857,3.786,858,3.786,859,3.786,860,3.786,861,3.786,862,3.786,863,3.786,864,3.786,865,3.786,866,5.546,867,3.786,868,3.786,869,3.786,870,6.394,871,3.786,872,3.786,873,6.274,874,3.786,875,3.786,876,4.968,877,3.786,878,3.786,879,3.786,880,3.786,881,4.968,882,4.968,883,3.786,884,3.786,885,3.786,886,4.968,887,4.968,888,3.786,889,3.786,890,3.786,891,3.786,892,3.786,893,3.197,894,3.786,895,3.786,896,3.786,897,3.786,898,3.786,899,3.786,900,3.786,901,3.786,902,3.786,903,3.786,904,3.786,905,3.786,906,3.786,907,3.786,908,3.786,909,3.786,910,3.786,911,3.786,912,4.968]],["title/modules.html",[2,2.533]],["body/modules.html",[1,3.379,2,2.81,11,2.81,12,0.023,13,3.068,79,0.019,80,0.023,81,0.019,893,5.346,913,6.331,914,6.331,915,6.331]],["title/overview.html",[916,3.865]],["body/overview.html",[0,1.93,1,4.175,2,2.095,3,2.095,4,2.519,5,2.519,6,2.519,7,2.519,8,2.519,9,3.197,10,3.197,11,3.737,12,0.026,13,4.032,14,3.306,15,2.519,16,2.288,21,1.658,79,0.015,80,0.019,81,0.015,116,3.016,148,3.197,149,3.197,150,3.197,151,3.864,152,3.864,166,1.658,287,2.809,313,3.197,314,3.197,316,3.069,317,2.827,318,2.827,498,2.809,511,1.17,916,3.197,917,3.786,918,3.786,919,3.786,920,3.786,921,3.786,922,3.786]],["title/miscellaneous/variables.html",[844,1.86,923,3.404]],["body/miscellaneous/variables.html",[12,0.027,32,0.539,46,3.61,53,2.13,61,2.784,79,0.014,80,0.019,81,0.014,87,0.303,113,2.441,130,1.61,140,1.393,141,0.694,189,0.991,220,2.03,295,3.098,323,1.73,331,1.87,448,3.869,457,3.098,479,4.314,510,2.441,512,2.722,518,3.098,519,4.61,521,1.606,522,3.238,523,4.109,524,3.098,525,4.109,526,3.098,527,3.098,528,3.098,529,3.098,567,3.098,767,3.098,768,4.109,770,4.109,773,3.098,774,4.109,825,3.098,844,2.441,923,3.098,924,3.668,925,3.668,926,4.866,927,3.668,928,3.668,929,3.668,930,3.668,931,4.866,932,3.668,933,4.866,934,3.668,935,4.866,936,3.668,937,3.668,938,5.46,939,3.668,940,3.668,941,3.668,942,3.668,943,3.668,944,3.668]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/BasicAuthGuard.html":{},"modules/FcmAdminServerModule.html":{},"controllers/FcmController.html":{},"injectables/FcmService.html":{},"injectables/JwtAccessTokenGuard.html":{},"injectables/JwtAccessTokenStrategy.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtRefreshTokenGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"classes/MatchConstraint.html":{},"interfaces/MessagePayload.html":{},"classes/MulticastRequestDto.html":{},"controllers/NextClientController.html":{},"classes/Notification.html":{},"classes/NotificationResponseDto.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/SingleRequestDto.html":{},"classes/Subscriber.html":{},"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{},"classes/SubscriptionRequestDto.html":{},"classes/SubscriptionResponseDto.html":{},"classes/TopicRequestDto.html":{},"classes/TopicsResponseDto.html":{},"classes/User.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":764,"title":{},"body":{"coverage.html":{}}}],["0.1.13",{"_index":838,"title":{},"body":{"dependencies.html":{}}}],["0.12.2",{"_index":808,"title":{},"body":{"dependencies.html":{}}}],["0.2.29",{"_index":841,"title":{},"body":{"dependencies.html":{}}}],["0.20.0",{"_index":804,"title":{},"body":{"dependencies.html":{}}}],["0.3.1",{"_index":807,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":809,"title":{},"body":{"dependencies.html":{}}}],["0.5.0",{"_index":792,"title":{},"body":{"dependencies.html":{}}}],["0.8.0",{"_index":812,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":771,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":766,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":779,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":772,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":776,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":765,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":778,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":777,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":775,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":921,"title":{},"body":{"overview.html":{}}}],["1.11.0",{"_index":814,"title":{},"body":{"dependencies.html":{}}}],["1.2.3",{"_index":798,"title":{},"body":{"dependencies.html":{}}}],["1.4.5",{"_index":811,"title":{},"body":{"dependencies.html":{}}}],["1.8.6",{"_index":835,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["13",{"_index":920,"title":{},"body":{"overview.html":{}}}],["16.14.0",{"_index":832,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":922,"title":{},"body":{"overview.html":{}}}],["2.0.3",{"_index":828,"title":{},"body":{"dependencies.html":{}}}],["3",{"_index":917,"title":{},"body":{"overview.html":{}}}],["3.0.0",{"_index":800,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":840,"title":{},"body":{"dependencies.html":{}}}],["3.1.0",{"_index":824,"title":{},"body":{"dependencies.html":{}}}],["3.5.33",{"_index":802,"title":{},"body":{"dependencies.html":{}}}],["3.6.3",{"_index":826,"title":{},"body":{"dependencies.html":{}}}],["4.0.0",{"_index":789,"title":{},"body":{"dependencies.html":{}}}],["4.11.0",{"_index":785,"title":{},"body":{"dependencies.html":{}}}],["4.2.0",{"_index":821,"title":{},"body":{"dependencies.html":{}}}],["4.9.1",{"_index":787,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":918,"title":{},"body":{"overview.html":{}}}],["5.0.0",{"_index":805,"title":{},"body":{"dependencies.html":{}}}],["5.1.3",{"_index":817,"title":{},"body":{"dependencies.html":{}}}],["5432",{"_index":942,"title":{},"body":{"miscellaneous/variables.html":{}}}],["7.1.0",{"_index":795,"title":{},"body":{"dependencies.html":{}}}],["7.1.4",{"_index":797,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":794,"title":{},"body":{"dependencies.html":{}}}],["7.24.0",{"_index":818,"title":{},"body":{"dependencies.html":{}}}],["7.5.1",{"_index":791,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":919,"title":{},"body":{"overview.html":{}}}],["8.3.1",{"_index":843,"title":{},"body":{"dependencies.html":{}}}],["8.5.0",{"_index":830,"title":{},"body":{"dependencies.html":{}}}],["86400",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["9.3.0",{"_index":819,"title":{},"body":{"dependencies.html":{}}}],["9.5.5",{"_index":827,"title":{},"body":{"dependencies.html":{}}}],["900",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["__dirname",{"_index":936,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_next",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["access",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/FcmController.html":{},"injectables/JwtAccessTokenGuard.html":{},"injectables/JwtAccessTokenStrategy.html":{},"controllers/NextClientController.html":{},"controllers/NotificationsController.html":{},"controllers/SubscribersController.html":{},"coverage.html":{}}}],["accesstoken",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{}}}],["accesstokencookie",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["admin",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/FcmAdminServerModule.html":{},"controllers/FcmController.html":{},"injectables/FcmService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["admin.credential.cert(serviceaccount",{"_index":423,"title":{},"body":{"injectables/FcmService.html":{}}}],["admin.firebaseio.com",{"_index":428,"title":{},"body":{"injectables/FcmService.html":{}}}],["admin.initializeapp",{"_index":421,"title":{},"body":{"injectables/FcmService.html":{}}}],["admin.messaging().send(message",{"_index":458,"title":{},"body":{"injectables/FcmService.html":{}}}],["admin.messaging().sendmulticast(message",{"_index":469,"title":{},"body":{"injectables/FcmService.html":{}}}],["admin.messaging().subscribetotopic(token",{"_index":436,"title":{},"body":{"injectables/FcmService.html":{}}}],["admin.messaging().unsubscribefromtopic(token",{"_index":449,"title":{},"body":{"injectables/FcmService.html":{}}}],["admin.messaging.message",{"_index":417,"title":{},"body":{"injectables/FcmService.html":{}}}],["admin.messaging.multicastmessage",{"_index":419,"title":{},"body":{"injectables/FcmService.html":{}}}],["adminsubscriptiontotopic",{"_index":335,"title":{},"body":{"controllers/FcmController.html":{}}}],["adminsubscriptiontotopic(subscriptionrequestdto",{"_index":340,"title":{},"body":{"controllers/FcmController.html":{}}}],["admintogglesubscriptiontotopic",{"_index":386,"title":{},"body":{"injectables/FcmService.html":{}}}],["admintogglesubscriptiontotopic(subscriptionrequestdto",{"_index":392,"title":{},"body":{"injectables/FcmService.html":{}}}],["age=0",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["alpha.56",{"_index":790,"title":{},"body":{"dependencies.html":{}}}],["already",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FcmService.html":{}}}],["amazing",{"_index":894,"title":{},"body":{"index.html":{}}}],["angular",{"_index":864,"title":{},"body":{"index.html":{}}}],["any)[relatedpropertyname",{"_index":534,"title":{},"body":{"classes/MatchConstraint.html":{}}}],["app",{"_index":872,"title":{},"body":{"index.html":{}}}],["applications",{"_index":861,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["args",{"_index":515,"title":{},"body":{"classes/MatchConstraint.html":{}}}],["args.constraints",{"_index":531,"title":{},"body":{"classes/MatchConstraint.html":{}}}],["args.object",{"_index":533,"title":{},"body":{"classes/MatchConstraint.html":{}}}],["arrayminsize",{"_index":540,"title":{},"body":{"classes/MulticastRequestDto.html":{}}}],["arrayminsize(1",{"_index":543,"title":{},"body":{"classes/MulticastRequestDto.html":{}}}],["assets",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["async",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/FcmController.html":{},"injectables/FcmService.html":{},"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"controllers/NextClientController.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{}}}],["auth",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":154,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtRefreshTokenStrategy.html":{}}}],["auth.strategy",{"_index":369,"title":{},"body":{"controllers/FcmController.html":{}}}],["auth.strategy.ts",{"_index":291,"title":{},"body":{"guards/BasicAuthGuard.html":{},"coverage.html":{}}}],["auth.strategy.ts:19",{"_index":296,"title":{},"body":{"guards/BasicAuthGuard.html":{}}}],["auth.strategy.ts:7",{"_index":301,"title":{},"body":{"guards/BasicAuthGuard.html":{}}}],["auth/auth.module",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/FcmAdminServerModule.html":{}}}],["auth/auth.service",{"_index":565,"title":{},"body":{"controllers/NextClientController.html":{}}}],["auth/guards/basic",{"_index":368,"title":{},"body":{"controllers/FcmController.html":{}}}],["auth/guards/jwt",{"_index":367,"title":{},"body":{"controllers/FcmController.html":{},"controllers/NextClientController.html":{},"controllers/NotificationsController.html":{},"controllers/SubscribersController.html":{}}}],["authcontroller",{"_index":83,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":478,"title":{},"body":{"injectables/JwtAccessTokenGuard.html":{},"injectables/JwtRefreshTokenGuard.html":{}}}],["authmodule",{"_index":11,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FcmAdminServerModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":904,"title":{},"body":{"index.html":{}}}],["authorization",{"_index":303,"title":{},"body":{"guards/BasicAuthGuard.html":{}}}],["authorization.split",{"_index":308,"title":{},"body":{"guards/BasicAuthGuard.html":{}}}],["authservice",{"_index":116,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"controllers/NextClientController.html":{},"coverage.html":{},"overview.html":{}}}],["authservice.setcookies(accesstoken",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{}}}],["await",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/FcmController.html":{},"injectables/FcmService.html":{},"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"controllers/NextClientController.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{}}}],["axios",{"_index":803,"title":{},"body":{"dependencies.html":{}}}],["backers",{"_index":895,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":407,"title":{},"body":{"injectables/FcmService.html":{},"injectables/NotificationsService.html":{},"injectables/SubscribersService.html":{}}}],["badrequestexception('format",{"_index":738,"title":{},"body":{"injectables/SubscribersService.html":{}}}],["badrequestexception('id",{"_index":643,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["badrequestexception('subscribed",{"_index":447,"title":{},"body":{"injectables/FcmService.html":{}}}],["badrequestexception('token",{"_index":454,"title":{},"body":{"injectables/FcmService.html":{}}}],["base64",{"_index":306,"title":{},"body":{"guards/BasicAuthGuard.html":{}}}],["basicauthguard",{"_index":288,"title":{"guards/BasicAuthGuard.html":{}},"body":{"guards/BasicAuthGuard.html":{},"controllers/FcmController.html":{},"coverage.html":{}}}],["basicauthguard.validaterequest(request",{"_index":312,"title":{},"body":{"guards/BasicAuthGuard.html":{}}}],["bcrypt",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.compare(password",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(password",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(refreshtoken",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["body",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FcmController.html":{},"injectables/FcmService.html":{},"interfaces/JwtPayload.html":{},"interfaces/MessagePayload.html":{},"classes/Notification.html":{},"classes/NotificationResponseDto.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/SingleRequestDto.html":{},"classes/TopicRequestDto.html":{}}}],["boolean",{"_index":298,"title":{},"body":{"guards/BasicAuthGuard.html":{},"injectables/FcmService.html":{},"classes/MatchConstraint.html":{},"classes/Subscriber.html":{},"injectables/SubscribersService.html":{},"classes/SubscriptionRequestDto.html":{},"classes/SubscriptionResponseDto.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FcmAdminServerModule.html":{},"overview.html":{}}}],["browse",{"_index":915,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":913,"title":{},"body":{"modules.html":{}}}],["buffer.from",{"_index":304,"title":{},"body":{"guards/BasicAuthGuard.html":{}}}],["building",{"_index":856,"title":{},"body":{"index.html":{}}}],["canactivate",{"_index":292,"title":{},"body":{"guards/BasicAuthGuard.html":{}}}],["canactivate(context",{"_index":294,"title":{},"body":{"guards/BasicAuthGuard.html":{}}}],["catch",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FcmService.html":{},"injectables/NotificationsService.html":{},"injectables/SubscribersService.html":{}}}],["class",{"_index":67,"title":{"classes/MatchConstraint.html":{},"classes/MulticastRequestDto.html":{},"classes/Notification.html":{},"classes/NotificationResponseDto.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/SingleRequestDto.html":{},"classes/Subscriber.html":{},"classes/SubscriptionRequestDto.html":{},"classes/SubscriptionResponseDto.html":{},"classes/TopicRequestDto.html":{},"classes/TopicsResponseDto.html":{},"classes/User.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/BasicAuthGuard.html":{},"modules/FcmAdminServerModule.html":{},"controllers/FcmController.html":{},"injectables/FcmService.html":{},"injectables/JwtAccessTokenGuard.html":{},"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"classes/MatchConstraint.html":{},"classes/MulticastRequestDto.html":{},"controllers/NextClientController.html":{},"classes/Notification.html":{},"classes/NotificationResponseDto.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/SingleRequestDto.html":{},"classes/Subscriber.html":{},"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{},"classes/SubscriptionRequestDto.html":{},"classes/SubscriptionResponseDto.html":{},"classes/TopicRequestDto.html":{},"classes/TopicsResponseDto.html":{},"classes/User.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":511,"title":{},"body":{"classes/MatchConstraint.html":{},"classes/MulticastRequestDto.html":{},"classes/Notification.html":{},"classes/NotificationResponseDto.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/SingleRequestDto.html":{},"classes/Subscriber.html":{},"classes/SubscriptionRequestDto.html":{},"classes/SubscriptionResponseDto.html":{},"classes/TopicRequestDto.html":{},"classes/TopicsResponseDto.html":{},"classes/User.html":{},"overview.html":{}}}],["client.controller",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["client.controller.ts",{"_index":545,"title":{},"body":{"controllers/NextClientController.html":{},"coverage.html":{}}}],["client.controller.ts:15",{"_index":559,"title":{},"body":{"controllers/NextClientController.html":{}}}],["client.controller.ts:22",{"_index":555,"title":{},"body":{"controllers/NextClientController.html":{}}}],["client.controller.ts:31",{"_index":557,"title":{},"body":{"controllers/NextClientController.html":{}}}],["client.controller.ts:40",{"_index":562,"title":{},"body":{"controllers/NextClientController.html":{}}}],["clientsubscriptiontotopic",{"_index":336,"title":{},"body":{"controllers/FcmController.html":{},"injectables/FcmService.html":{}}}],["clientsubscriptiontotopic(subscriptionrequestdto",{"_index":346,"title":{},"body":{"controllers/FcmController.html":{},"injectables/FcmService.html":{}}}],["cloud",{"_index":426,"title":{},"body":{"injectables/FcmService.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":148,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":149,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":150,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_fcmadminservermodule",{"_index":313,"title":{},"body":{"modules/FcmAdminServerModule.html":{},"overview.html":{}}}],["cluster_fcmadminservermodule_imports",{"_index":315,"title":{},"body":{"modules/FcmAdminServerModule.html":{}}}],["cluster_fcmadminservermodule_providers",{"_index":314,"title":{},"body":{"modules/FcmAdminServerModule.html":{},"overview.html":{}}}],["column",{"_index":579,"title":{},"body":{"classes/Notification.html":{},"classes/Subscriber.html":{},"classes/User.html":{}}}],["common/config/serviceaccountkey.json",{"_index":411,"title":{},"body":{"injectables/FcmService.html":{}}}],["common/config/typeorm.config",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["common/dtos/multicast",{"_index":366,"title":{},"body":{"controllers/FcmController.html":{},"injectables/FcmService.html":{}}}],["common/dtos/notification",{"_index":612,"title":{},"body":{"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{}}}],["common/dtos/sign",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["common/dtos/single",{"_index":365,"title":{},"body":{"controllers/FcmController.html":{},"injectables/FcmService.html":{}}}],["common/dtos/subscription",{"_index":363,"title":{},"body":{"controllers/FcmController.html":{},"injectables/FcmService.html":{},"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{}}}],["common/dtos/topic",{"_index":370,"title":{},"body":{"controllers/FcmController.html":{},"injectables/FcmService.html":{}}}],["common/dtos/topics",{"_index":703,"title":{},"body":{"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{}}}],["common/entities/notification.entity",{"_index":324,"title":{},"body":{"modules/FcmAdminServerModule.html":{},"injectables/NotificationsService.html":{}}}],["common/entities/subscriber.entity",{"_index":332,"title":{},"body":{"modules/FcmAdminServerModule.html":{},"injectables/SubscribersService.html":{}}}],["common/entities/user.entity",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenStrategy.html":{}}}],["common/enums",{"_index":415,"title":{},"body":{"injectables/FcmService.html":{},"injectables/NotificationsService.html":{}}}],["common/interfaces",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenStrategy.html":{}}}],["completed",{"_index":849,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["configmodule",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["configure",{"_index":25,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":26,"title":{},"body":{"modules/AppModule.html":{}}}],["confirmpassword",{"_index":665,"title":{},"body":{"classes/SignUpDto.html":{}}}],["conflictexception",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{},"injectables/NotificationsService.html":{},"injectables/SubscribersService.html":{}}}],["conflictexception('username",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{}}}],["conflictexception(error",{"_index":642,"title":{},"body":{"injectables/NotificationsService.html":{},"injectables/SubscribersService.html":{}}}],["connection",{"_index":390,"title":{},"body":{"injectables/FcmService.html":{},"injectables/NotificationsService.html":{}}}],["console.log",{"_index":464,"title":{},"body":{"injectables/FcmService.html":{}}}],["console.log('error",{"_index":473,"title":{},"body":{"injectables/FcmService.html":{}}}],["console.log(`error",{"_index":474,"title":{},"body":{"injectables/FcmService.html":{}}}],["console.log(error",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{},"injectables/NotificationsService.html":{},"injectables/SubscribersService.html":{}}}],["console.log(refreshtoken",{"_index":507,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["console.log(user",{"_index":509,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["console.log(username",{"_index":506,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["const",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/BasicAuthGuard.html":{},"injectables/FcmService.html":{},"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"classes/MatchConstraint.html":{},"controllers/NextClientController.html":{},"injectables/NotificationsService.html":{},"injectables/SubscribersService.html":{},"miscellaneous/variables.html":{}}}],["constraints",{"_index":529,"title":{},"body":{"classes/MatchConstraint.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FcmService.html":{},"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"controllers/NextClientController.html":{},"injectables/NotificationsService.html":{},"injectables/SubscribersService.html":{}}}],["constructor(notificationrepository",{"_index":621,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["constructor(notificationsservice",{"_index":389,"title":{},"body":{"injectables/FcmService.html":{}}}],["constructor(private",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FcmController.html":{},"controllers/NotificationsController.html":{},"controllers/SubscribersController.html":{}}}],["constructor(subscriberrepository",{"_index":709,"title":{},"body":{"injectables/SubscribersService.html":{}}}],["constructor(userrepository",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenStrategy.html":{}}}],["consumer",{"_index":34,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(nextmiddleware).forroutes",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["context",{"_index":297,"title":{},"body":{"guards/BasicAuthGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":311,"title":{},"body":{"guards/BasicAuthGuard.html":{}}}],["controller",{"_index":82,"title":{"controllers/AuthController.html":{},"controllers/FcmController.html":{},"controllers/NextClientController.html":{},"controllers/NotificationsController.html":{},"controllers/SubscribersController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/FcmController.html":{},"controllers/NextClientController.html":{},"controllers/NotificationsController.html":{},"controllers/SubscribersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('fcm",{"_index":371,"title":{},"body":{"controllers/FcmController.html":{},"controllers/NotificationsController.html":{},"controllers/SubscribersController.html":{}}}],["controllers",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/FcmAdminServerModule.html":{},"controllers/FcmController.html":{},"controllers/NextClientController.html":{},"controllers/NotificationsController.html":{},"controllers/SubscribersController.html":{},"overview.html":{}}}],["controllers/fcm.controller",{"_index":326,"title":{},"body":{"modules/FcmAdminServerModule.html":{}}}],["controllers/notifications.controller",{"_index":325,"title":{},"body":{"modules/FcmAdminServerModule.html":{}}}],["controllers/subscriberscontroller",{"_index":327,"title":{},"body":{"modules/FcmAdminServerModule.html":{}}}],["cookie",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["cookie.serialize",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["cookies",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["cookies.push(accesstokencookie",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["cookies.push(refreshtokencookie",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{}}}],["coverage",{"_index":760,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["createdon",{"_index":577,"title":{},"body":{"classes/Notification.html":{},"classes/NotificationResponseDto.html":{}}}],["createparamdecorator",{"_index":927,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createquerybuilder('subscriber",{"_index":723,"title":{},"body":{"injectables/SubscribersService.html":{}}}],["createquerybuilder('user",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{}}}],["credential",{"_index":422,"title":{},"body":{"injectables/FcmService.html":{}}}],["credentials",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["csurf",{"_index":813,"title":{},"body":{"dependencies.html":{}}}],["ctx",{"_index":928,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":929,"title":{},"body":{"miscellaneous/variables.html":{}}}],["currenthashedrefreshtoken",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{},"classes/User.html":{}}}],["data",{"_index":457,"title":{},"body":{"injectables/FcmService.html":{},"miscellaneous/variables.html":{}}}],["database",{"_index":943,"title":{},"body":{"miscellaneous/variables.html":{}}}],["databaseurl",{"_index":424,"title":{},"body":{"injectables/FcmService.html":{}}}],["date.now().tolocalestring",{"_index":635,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FcmAdminServerModule.html":{},"overview.html":{}}}],["decorators",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FcmController.html":{},"classes/MulticastRequestDto.html":{},"controllers/NextClientController.html":{},"classes/Notification.html":{},"controllers/NotificationsController.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/SingleRequestDto.html":{},"classes/Subscriber.html":{},"controllers/SubscribersController.html":{},"classes/SubscriptionRequestDto.html":{},"classes/TopicRequestDto.html":{},"classes/User.html":{}}}],["default",{"_index":479,"title":{},"body":{"injectables/JwtAccessTokenGuard.html":{},"injectables/JwtRefreshTokenGuard.html":{},"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":161,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/BasicAuthGuard.html":{},"controllers/FcmController.html":{},"injectables/FcmService.html":{},"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"classes/MatchConstraint.html":{},"classes/MulticastRequestDto.html":{},"controllers/NextClientController.html":{},"classes/Notification.html":{},"classes/NotificationResponseDto.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/SingleRequestDto.html":{},"classes/Subscriber.html":{},"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{},"classes/SubscriptionRequestDto.html":{},"classes/SubscriptionResponseDto.html":{},"classes/TopicRequestDto.html":{},"classes/TopicsResponseDto.html":{},"classes/User.html":{}}}],["deletebyid",{"_index":605,"title":{},"body":{"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{}}}],["deletebyid(@body",{"_index":616,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["deletebyid(ids",{"_index":607,"title":{},"body":{"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FcmAdminServerModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":865,"title":{},"body":{"index.html":{}}}],["development",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["distinct(true",{"_index":732,"title":{},"body":{"injectables/SubscribersService.html":{}}}],["documentation",{"_index":761,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":833,"title":{},"body":{"dependencies.html":{}}}],["dto",{"_index":734,"title":{},"body":{"injectables/SubscribersService.html":{}}}],["dto.topics",{"_index":735,"title":{},"body":{"injectables/SubscribersService.html":{}}}],["e2e",{"_index":883,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":857,"title":{},"body":{"index.html":{}}}],["empty",{"_index":455,"title":{},"body":{"injectables/FcmService.html":{}}}],["entities",{"_index":935,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entity",{"_index":590,"title":{},"body":{"classes/Notification.html":{},"classes/Subscriber.html":{},"classes/User.html":{}}}],["entity('notification",{"_index":592,"title":{},"body":{"classes/Notification.html":{}}}],["entity('subscriber",{"_index":694,"title":{},"body":{"classes/Subscriber.html":{}}}],["entity('user",{"_index":759,"title":{},"body":{"classes/User.html":{}}}],["entity.{js,ts",{"_index":937,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enumerations",{"_index":845,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums",{"_index":591,"title":{},"body":{"classes/Notification.html":{},"classes/NotificationResponseDto.html":{},"classes/SingleRequestDto.html":{},"classes/TopicRequestDto.html":{}}}],["envfilepath",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["error",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FcmService.html":{},"injectables/NotificationsService.html":{},"injectables/SubscribersService.html":{}}}],["executioncontext",{"_index":295,"title":{},"body":{"guards/BasicAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["exists",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiresin",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/BasicAuthGuard.html":{},"modules/FcmAdminServerModule.html":{},"controllers/FcmController.html":{},"injectables/FcmService.html":{},"injectables/JwtAccessTokenGuard.html":{},"injectables/JwtAccessTokenStrategy.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtRefreshTokenGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"classes/MatchConstraint.html":{},"interfaces/MessagePayload.html":{},"classes/MulticastRequestDto.html":{},"controllers/NextClientController.html":{},"classes/Notification.html":{},"classes/NotificationResponseDto.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/SingleRequestDto.html":{},"classes/Subscriber.html":{},"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{},"classes/SubscriptionRequestDto.html":{},"classes/SubscriptionResponseDto.html":{},"classes/TopicRequestDto.html":{},"classes/TopicsResponseDto.html":{},"classes/User.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FcmAdminServerModule.html":{},"overview.html":{}}}],["express",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/BasicAuthGuard.html":{},"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"dependencies.html":{}}}],["extends",{"_index":480,"title":{},"body":{"injectables/JwtAccessTokenGuard.html":{},"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{}}}],["extractjwt",{"_index":488,"title":{},"body":{"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenStrategy.html":{}}}],["extractjwt.fromextractors",{"_index":492,"title":{},"body":{"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenStrategy.html":{}}}],["failed",{"_index":850,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["false",{"_index":472,"title":{},"body":{"injectables/FcmService.html":{},"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenStrategy.html":{}}}],["favicon.ico",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["fcm",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"controllers/FcmController.html":{},"controllers/NotificationsController.html":{},"controllers/SubscribersController.html":{}}}],["fcm_db",{"_index":944,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fcmadminservermodule",{"_index":13,"title":{"modules/FcmAdminServerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FcmAdminServerModule.html":{},"modules.html":{},"overview.html":{}}}],["fcmcontroller",{"_index":321,"title":{"controllers/FcmController.html":{}},"body":{"modules/FcmAdminServerModule.html":{},"controllers/FcmController.html":{},"coverage.html":{}}}],["fcmservice",{"_index":316,"title":{"injectables/FcmService.html":{}},"body":{"modules/FcmAdminServerModule.html":{},"controllers/FcmController.html":{},"injectables/FcmService.html":{},"coverage.html":{},"overview.html":{}}}],["fcmservice.initfirebase",{"_index":420,"title":{},"body":{"injectables/FcmService.html":{}}}],["file",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/BasicAuthGuard.html":{},"modules/FcmAdminServerModule.html":{},"controllers/FcmController.html":{},"injectables/FcmService.html":{},"injectables/JwtAccessTokenGuard.html":{},"injectables/JwtAccessTokenStrategy.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtRefreshTokenGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"classes/MatchConstraint.html":{},"interfaces/MessagePayload.html":{},"classes/MulticastRequestDto.html":{},"controllers/NextClientController.html":{},"classes/Notification.html":{},"classes/NotificationResponseDto.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/SingleRequestDto.html":{},"classes/Subscriber.html":{},"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{},"classes/SubscriptionRequestDto.html":{},"classes/SubscriptionResponseDto.html":{},"classes/TopicRequestDto.html":{},"classes/TopicsResponseDto.html":{},"classes/User.html":{},"coverage.html":{}}}],["finally",{"_index":442,"title":{},"body":{"injectables/FcmService.html":{},"injectables/NotificationsService.html":{}}}],["findall",{"_index":606,"title":{},"body":{"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{}}}],["findalltopics",{"_index":697,"title":{},"body":{"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{}}}],["findbyid",{"_index":619,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["findbyid(id",{"_index":626,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["findbyusername",{"_index":707,"title":{},"body":{"injectables/SubscribersService.html":{}}}],["findbyusername(username",{"_index":714,"title":{},"body":{"injectables/SubscribersService.html":{}}}],["firebase",{"_index":410,"title":{},"body":{"injectables/FcmService.html":{},"dependencies.html":{},"index.html":{}}}],["format",{"_index":644,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["found",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FcmService.html":{},"injectables/NotificationsService.html":{}}}],["framework",{"_index":855,"title":{},"body":{"index.html":{}}}],["get('/compose",{"_index":574,"title":{},"body":{"controllers/NextClientController.html":{}}}],["get('/list",{"_index":572,"title":{},"body":{"controllers/NextClientController.html":{}}}],["get('/topics",{"_index":699,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["getaccesstoken",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["getaccesstoken(payload",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{}}}],["getcookiesforlogout",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["getmany",{"_index":725,"title":{},"body":{"injectables/SubscribersService.html":{}}}],["getone",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{}}}],["getrawmany",{"_index":733,"title":{},"body":{"injectables/SubscribersService.html":{}}}],["getrefreshtoken",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{}}}],["getrefreshtoken(payload",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{}}}],["getting",{"_index":851,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":770,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getuserifrefreshtokenmatches",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{}}}],["getuserifrefreshtokenmatches(refreshtoken",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{}}}],["grow",{"_index":890,"title":{},"body":{"index.html":{}}}],["guard",{"_index":287,"title":{"guards/BasicAuthGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":289,"title":{},"body":{"guards/BasicAuthGuard.html":{}}}],["guards/jwt",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["handle",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["heavily",{"_index":862,"title":{},"body":{"index.html":{}}}],["helmet",{"_index":820,"title":{},"body":{"dependencies.html":{}}}],["here",{"_index":901,"title":{},"body":{"index.html":{}}}],["host",{"_index":939,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http",{"_index":564,"title":{},"body":{"controllers/NextClientController.html":{}}}],["httpcode",{"_index":362,"title":{},"body":{"controllers/FcmController.html":{},"controllers/NotificationsController.html":{}}}],["httpcode(200",{"_index":374,"title":{},"body":{"controllers/FcmController.html":{},"controllers/NotificationsController.html":{}}}],["httpexception",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{}}}],["httponly",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["https://fir",{"_index":425,"title":{},"body":{"injectables/FcmService.html":{}}}],["https://nestjs.com",{"_index":908,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["httpstatus.not_found",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["id",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{},"classes/Notification.html":{},"classes/NotificationResponseDto.html":{},"injectables/NotificationsService.html":{},"classes/Subscriber.html":{},"classes/SubscriptionResponseDto.html":{},"classes/User.html":{}}}],["identifier",{"_index":762,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":610,"title":{},"body":{"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{}}}],["ignoreexpiration",{"_index":495,"title":{},"body":{"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenStrategy.html":{}}}],["images",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["implements",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"guards/BasicAuthGuard.html":{},"classes/MatchConstraint.html":{}}}],["import",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/BasicAuthGuard.html":{},"modules/FcmAdminServerModule.html":{},"controllers/FcmController.html":{},"injectables/FcmService.html":{},"injectables/JwtAccessTokenGuard.html":{},"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"classes/MatchConstraint.html":{},"classes/MulticastRequestDto.html":{},"controllers/NextClientController.html":{},"classes/Notification.html":{},"classes/NotificationResponseDto.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/SingleRequestDto.html":{},"classes/Subscriber.html":{},"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{},"classes/SubscriptionRequestDto.html":{},"classes/TopicRequestDto.html":{},"classes/User.html":{}}}],["imports",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FcmAdminServerModule.html":{}}}],["in_progress",{"_index":848,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["incomingmessage",{"_index":551,"title":{},"body":{"controllers/NextClientController.html":{}}}],["incorrect",{"_index":645,"title":{},"body":{"injectables/NotificationsService.html":{},"injectables/SubscribersService.html":{}}}],["index",{"_index":87,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/BasicAuthGuard.html":{},"controllers/FcmController.html":{},"injectables/FcmService.html":{},"injectables/JwtAccessTokenStrategy.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"classes/MatchConstraint.html":{},"interfaces/MessagePayload.html":{},"classes/MulticastRequestDto.html":{},"controllers/NextClientController.html":{},"classes/Notification.html":{},"classes/NotificationResponseDto.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/SingleRequestDto.html":{},"classes/Subscriber.html":{},"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{},"classes/SubscriptionRequestDto.html":{},"classes/SubscriptionResponseDto.html":{},"classes/TopicRequestDto.html":{},"classes/TopicsResponseDto.html":{},"classes/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/BasicAuthGuard.html":{},"modules/FcmAdminServerModule.html":{},"controllers/FcmController.html":{},"injectables/FcmService.html":{},"injectables/JwtAccessTokenGuard.html":{},"injectables/JwtAccessTokenStrategy.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtRefreshTokenGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"classes/MatchConstraint.html":{},"interfaces/MessagePayload.html":{},"classes/MulticastRequestDto.html":{},"controllers/NextClientController.html":{},"classes/Notification.html":{},"classes/NotificationResponseDto.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/SingleRequestDto.html":{},"classes/Subscriber.html":{},"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{},"classes/SubscriptionRequestDto.html":{},"classes/SubscriptionResponseDto.html":{},"classes/TopicRequestDto.html":{},"classes/TopicsResponseDto.html":{},"classes/User.html":{}}}],["initfirebase",{"_index":387,"title":{},"body":{"injectables/FcmService.html":{}}}],["injectable",{"_index":165,"title":{"injectables/AuthService.html":{},"injectables/FcmService.html":{},"injectables/JwtAccessTokenGuard.html":{},"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/NotificationsService.html":{},"injectables/SubscribersService.html":{}},"body":{"injectables/AuthService.html":{},"guards/BasicAuthGuard.html":{},"injectables/FcmService.html":{},"injectables/JwtAccessTokenGuard.html":{},"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/NotificationsService.html":{},"injectables/SubscribersService.html":{},"coverage.html":{}}}],["injectables",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FcmService.html":{},"injectables/JwtAccessTokenGuard.html":{},"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/NotificationsService.html":{},"injectables/SubscribersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/NotificationsService.html":{},"injectables/SubscribersService.html":{}}}],["injectrepository(notification",{"_index":630,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["injectrepository(subscriber",{"_index":720,"title":{},"body":{"injectables/SubscribersService.html":{}}}],["injectrepository(user",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenStrategy.html":{}}}],["inspired",{"_index":863,"title":{},"body":{"index.html":{}}}],["installation",{"_index":869,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":871,"title":{},"body":{"index.html":{}}}],["interface",{"_index":497,"title":{"interfaces/JwtPayload.html":{},"interfaces/MessagePayload.html":{}},"body":{"interfaces/JwtPayload.html":{},"interfaces/MessagePayload.html":{},"coverage.html":{}}}],["interfaces",{"_index":498,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/MessagePayload.html":{},"overview.html":{}}}],["internalservererrorexception",{"_index":408,"title":{},"body":{"injectables/FcmService.html":{}}}],["isadminuser",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{}}}],["isarray",{"_index":541,"title":{},"body":{"classes/MulticastRequestDto.html":{}}}],["isarray()@arrayminsize(1",{"_index":537,"title":{},"body":{"classes/MulticastRequestDto.html":{}}}],["isboolean",{"_index":741,"title":{},"body":{"classes/SubscriptionRequestDto.html":{}}}],["isenum",{"_index":684,"title":{},"body":{"classes/SingleRequestDto.html":{},"classes/TopicRequestDto.html":{}}}],["isenum(notificationtype",{"_index":686,"title":{},"body":{"classes/SingleRequestDto.html":{},"classes/TopicRequestDto.html":{}}}],["isenum(notificationtype)@isstring",{"_index":681,"title":{},"body":{"classes/SingleRequestDto.html":{},"classes/TopicRequestDto.html":{}}}],["isglobal",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["isnotempty",{"_index":747,"title":{},"body":{"classes/SubscriptionRequestDto.html":{}}}],["isomorphic",{"_index":822,"title":{},"body":{"dependencies.html":{}}}],["isrefreshtokenmatching",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["isstring",{"_index":657,"title":{},"body":{"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/SingleRequestDto.html":{},"classes/SubscriptionRequestDto.html":{},"classes/TopicRequestDto.html":{}}}],["isstring()@isnotempty",{"_index":743,"title":{},"body":{"classes/SubscriptionRequestDto.html":{}}}],["isstring()@minlength(4)@maxlength(20",{"_index":670,"title":{},"body":{"classes/SignUpDto.html":{},"classes/SingleRequestDto.html":{},"classes/SubscriptionRequestDto.html":{},"classes/TopicRequestDto.html":{}}}],["isstring()@minlength(4)@maxlength(250",{"_index":676,"title":{},"body":{"classes/SingleRequestDto.html":{},"classes/TopicRequestDto.html":{}}}],["isstring()@minlength(8)@maxlength(20",{"_index":656,"title":{},"body":{"classes/SignInRequestDto.html":{}}}],["isstring()@minlength(8)@maxlength(20)@match('password",{"_index":666,"title":{},"body":{"classes/SignUpDto.html":{}}}],["isstring()@minlength(8)@maxlength(20)@matches(/(?:(?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":651,"title":{},"body":{"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{}}}],["join",{"_index":897,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":162,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAccessTokenGuard.html":{},"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"dependencies.html":{}}}],["jwtaccesstokenguard",{"_index":124,"title":{"injectables/JwtAccessTokenGuard.html":{}},"body":{"controllers/AuthController.html":{},"controllers/FcmController.html":{},"injectables/JwtAccessTokenGuard.html":{},"controllers/NextClientController.html":{},"controllers/NotificationsController.html":{},"controllers/SubscribersController.html":{},"coverage.html":{}}}],["jwtaccesstokenstrategy",{"_index":151,"title":{"injectables/JwtAccessTokenStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtAccessTokenStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwtfromrequest",{"_index":491,"title":{},"body":{"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenStrategy.html":{}}}],["jwtmodule",{"_index":157,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":164,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":186,"title":{"interfaces/JwtPayload.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtAccessTokenStrategy.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"interfaces/MessagePayload.html":{},"coverage.html":{}}}],["jwtrefreshtokenguard",{"_index":120,"title":{"injectables/JwtRefreshTokenGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/JwtRefreshTokenGuard.html":{},"coverage.html":{}}}],["jwtrefreshtokenstrategy",{"_index":152,"title":{"injectables/JwtRefreshTokenStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwtservice",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{}}}],["kamil",{"_index":905,"title":{},"body":{"index.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FcmAdminServerModule.html":{},"overview.html":{}}}],["license",{"_index":911,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":887,"title":{},"body":{"index.html":{}}}],["limit",{"_index":816,"title":{},"body":{"dependencies.html":{}}}],["limit(1",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{}}}],["localhost",{"_index":940,"title":{},"body":{"miscellaneous/variables.html":{}}}],["login",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(request",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logout",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(@req",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(request",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{}}}],["match",{"_index":522,"title":{},"body":{"classes/MatchConstraint.html":{},"classes/SignUpDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["match('password",{"_index":674,"title":{},"body":{"classes/SignUpDto.html":{}}}],["matchconstraint",{"_index":510,"title":{"classes/MatchConstraint.html":{}},"body":{"classes/MatchConstraint.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["matches",{"_index":658,"title":{},"body":{"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{}}}],["matches(/(?:(?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":663,"title":{},"body":{"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{}}}],["matching",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/BasicAuthGuard.html":{},"modules/FcmAdminServerModule.html":{},"controllers/FcmController.html":{},"injectables/FcmService.html":{},"injectables/JwtAccessTokenGuard.html":{},"injectables/JwtAccessTokenStrategy.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtRefreshTokenGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"classes/MatchConstraint.html":{},"interfaces/MessagePayload.html":{},"classes/MulticastRequestDto.html":{},"controllers/NextClientController.html":{},"classes/Notification.html":{},"classes/NotificationResponseDto.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/SingleRequestDto.html":{},"classes/Subscriber.html":{},"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{},"classes/SubscriptionRequestDto.html":{},"classes/SubscriptionResponseDto.html":{},"classes/TopicRequestDto.html":{},"classes/TopicsResponseDto.html":{},"classes/User.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":783,"title":{},"body":{"dependencies.html":{}}}],["max",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["maxage",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["maxlength",{"_index":659,"title":{},"body":{"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/SingleRequestDto.html":{},"classes/SubscriptionRequestDto.html":{},"classes/TopicRequestDto.html":{}}}],["maxlength(20",{"_index":662,"title":{},"body":{"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/SingleRequestDto.html":{},"classes/SubscriptionRequestDto.html":{},"classes/TopicRequestDto.html":{}}}],["maxlength(250",{"_index":685,"title":{},"body":{"classes/SingleRequestDto.html":{},"classes/TopicRequestDto.html":{}}}],["message",{"_index":416,"title":{},"body":{"injectables/FcmService.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{}}}],["messagepayload",{"_index":501,"title":{"interfaces/MessagePayload.html":{}},"body":{"interfaces/JwtPayload.html":{},"interfaces/MessagePayload.html":{},"coverage.html":{}}}],["messaging",{"_index":427,"title":{},"body":{"injectables/FcmService.html":{}}}],["metadata",{"_index":837,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["methods",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/BasicAuthGuard.html":{},"controllers/FcmController.html":{},"injectables/FcmService.html":{},"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"classes/MatchConstraint.html":{},"controllers/NextClientController.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{}}}],["middlewareconsumer",{"_index":27,"title":{},"body":{"modules/AppModule.html":{}}}],["minlength",{"_index":660,"title":{},"body":{"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/SingleRequestDto.html":{},"classes/SubscriptionRequestDto.html":{},"classes/TopicRequestDto.html":{}}}],["minlength(4",{"_index":673,"title":{},"body":{"classes/SignUpDto.html":{},"classes/SingleRequestDto.html":{},"classes/SubscriptionRequestDto.html":{},"classes/TopicRequestDto.html":{}}}],["minlength(8",{"_index":661,"title":{},"body":{"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{}}}],["miscellaneous",{"_index":844,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":886,"title":{},"body":{"index.html":{}}}],["mode",{"_index":876,"title":{},"body":{"index.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FcmAdminServerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FcmAdminServerModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FcmAdminServerModule.html":{},"modules.html":{},"overview.html":{}}}],["mongodb",{"_index":825,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["mongodb://localhost/fcm_db",{"_index":932,"title":{},"body":{"miscellaneous/variables.html":{}}}],["more",{"_index":900,"title":{},"body":{"index.html":{}}}],["multicast",{"_index":471,"title":{},"body":{"injectables/FcmService.html":{},"miscellaneous/enumerations.html":{}}}],["multicastmessage",{"_index":418,"title":{},"body":{"injectables/FcmService.html":{}}}],["multicastnotificationrequestdto",{"_index":402,"title":{},"body":{"injectables/FcmService.html":{}}}],["multicastrequestdto",{"_index":350,"title":{"classes/MulticastRequestDto.html":{}},"body":{"controllers/FcmController.html":{},"injectables/FcmService.html":{},"classes/MulticastRequestDto.html":{},"coverage.html":{}}}],["myśliwiec",{"_index":906,"title":{},"body":{"index.html":{}}}],["name",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/BasicAuthGuard.html":{},"controllers/FcmController.html":{},"injectables/FcmService.html":{},"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"classes/MatchConstraint.html":{},"controllers/NextClientController.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"injectables/SubscribersService.html":{}}}],["nest",{"_index":866,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":910,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/BasicAuthGuard.html":{},"modules/FcmAdminServerModule.html":{},"controllers/FcmController.html":{},"injectables/FcmService.html":{},"injectables/JwtAccessTokenGuard.html":{},"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"controllers/NextClientController.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":793,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":158,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":156,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAccessTokenGuard.html":{},"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":796,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/FcmAdminServerModule.html":{},"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/NotificationsService.html":{},"injectables/SubscribersService.html":{},"dependencies.html":{}}}],["nestmodule",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["nestpress/next",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"controllers/NextClientController.html":{},"dependencies.html":{}}}],["new",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FcmService.html":{},"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/NotificationsService.html":{},"injectables/SubscribersService.html":{},"coverage.html":{}}}],["next",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"controllers/NextClientController.html":{},"dependencies.html":{}}}],["nextclientcontroller",{"_index":22,"title":{"controllers/NextClientController.html":{}},"body":{"modules/AppModule.html":{},"controllers/NextClientController.html":{},"coverage.html":{}}}],["nextmiddleware",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["nextmodule",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["nextservice",{"_index":563,"title":{},"body":{"controllers/NextClientController.html":{}}}],["node.js",{"_index":854,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FcmService.html":{}}}],["notfoundexception(`${username",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FcmService.html":{}}}],["notification",{"_index":323,"title":{"classes/Notification.html":{}},"body":{"modules/FcmAdminServerModule.html":{},"injectables/FcmService.html":{},"controllers/NextClientController.html":{},"classes/Notification.html":{},"injectables/NotificationsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["notification.body",{"_index":637,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["notification.createdon",{"_index":634,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["notification.status",{"_index":640,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["notification.title",{"_index":636,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["notification.topic",{"_index":633,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["notification.type",{"_index":638,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["notification.username",{"_index":639,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["notificationpayloaddto",{"_index":405,"title":{},"body":{"injectables/FcmService.html":{}}}],["notificationpayloaddto.token",{"_index":453,"title":{},"body":{"injectables/FcmService.html":{}}}],["notificationrepository",{"_index":623,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["notificationrequestdto",{"_index":357,"title":{},"body":{"controllers/FcmController.html":{}}}],["notificationresponsedto",{"_index":593,"title":{"classes/NotificationResponseDto.html":{}},"body":{"classes/NotificationResponseDto.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"coverage.html":{}}}],["notifications",{"_index":554,"title":{},"body":{"controllers/NextClientController.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"index.html":{}}}],["notifications.map",{"_index":632,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["notifications.service",{"_index":412,"title":{},"body":{"injectables/FcmService.html":{}}}],["notificationscontroller",{"_index":320,"title":{"controllers/NotificationsController.html":{}},"body":{"modules/FcmAdminServerModule.html":{},"controllers/NotificationsController.html":{},"coverage.html":{}}}],["notificationsservice",{"_index":317,"title":{"injectables/NotificationsService.html":{}},"body":{"modules/FcmAdminServerModule.html":{},"injectables/FcmService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"coverage.html":{},"overview.html":{}}}],["notificationstatus",{"_index":414,"title":{},"body":{"injectables/FcmService.html":{},"classes/Notification.html":{},"classes/NotificationResponseDto.html":{},"injectables/NotificationsService.html":{},"miscellaneous/enumerations.html":{}}}],["notificationstatus.completed",{"_index":460,"title":{},"body":{"injectables/FcmService.html":{}}}],["notificationstatus.failed",{"_index":463,"title":{},"body":{"injectables/FcmService.html":{}}}],["notificationtype",{"_index":587,"title":{},"body":{"classes/Notification.html":{},"classes/NotificationResponseDto.html":{},"injectables/NotificationsService.html":{},"classes/SingleRequestDto.html":{},"classes/TopicRequestDto.html":{},"miscellaneous/enumerations.html":{}}}],["npm",{"_index":870,"title":{},"body":{"index.html":{}}}],["null",{"_index":446,"title":{},"body":{"injectables/FcmService.html":{},"injectables/SubscribersService.html":{}}}],["number",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{},"classes/Notification.html":{},"classes/NotificationResponseDto.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/Subscriber.html":{},"classes/SubscriptionResponseDto.html":{},"classes/User.html":{}}}],["obj.topic",{"_index":737,"title":{},"body":{"injectables/SubscribersService.html":{}}}],["object",{"_index":524,"title":{},"body":{"classes/MatchConstraint.html":{},"miscellaneous/variables.html":{}}}],["object.constructor",{"_index":527,"title":{},"body":{"classes/MatchConstraint.html":{},"miscellaneous/variables.html":{}}}],["observable",{"_index":299,"title":{},"body":{"guards/BasicAuthGuard.html":{}}}],["open",{"_index":888,"title":{},"body":{"index.html":{}}}],["optional",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/BasicAuthGuard.html":{},"controllers/FcmController.html":{},"injectables/FcmService.html":{},"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"classes/MatchConstraint.html":{},"controllers/NextClientController.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"injectables/SubscribersService.html":{},"classes/SubscriptionRequestDto.html":{}}}],["options",{"_index":528,"title":{},"body":{"classes/MatchConstraint.html":{},"miscellaneous/variables.html":{}}}],["out",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/FcmAdminServerModule.html":{},"overview.html":{}}}],["overview",{"_index":916,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":782,"title":{"dependencies.html":{}},"body":{}}],["parameters",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/BasicAuthGuard.html":{},"controllers/FcmController.html":{},"injectables/FcmService.html":{},"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"classes/MatchConstraint.html":{},"controllers/NextClientController.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"injectables/SubscribersService.html":{}}}],["parser",{"_index":810,"title":{},"body":{"dependencies.html":{}}}],["passport",{"_index":489,"title":{},"body":{"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":155,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":160,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":486,"title":{},"body":{"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenStrategy.html":{}}}],["passreqtocallback",{"_index":505,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["password",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{},"guards/BasicAuthGuard.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["passwords",{"_index":667,"title":{},"body":{"classes/SignUpDto.html":{}}}],["path",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["payload",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenStrategy.html":{}}}],["pg",{"_index":829,"title":{},"body":{"dependencies.html":{}}}],["please",{"_index":898,"title":{},"body":{"index.html":{}}}],["port",{"_index":941,"title":{},"body":{"miscellaneous/variables.html":{}}}],["post",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FcmController.html":{},"controllers/NotificationsController.html":{}}}],["post('/admin",{"_index":376,"title":{},"body":{"controllers/FcmController.html":{}}}],["post('/delete",{"_index":615,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["post('/delete')@httpcode(200",{"_index":608,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["post('/login",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/multicast",{"_index":381,"title":{},"body":{"controllers/FcmController.html":{}}}],["post('/refresh",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/signup",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/subscribe",{"_index":373,"title":{},"body":{"controllers/FcmController.html":{}}}],["post('/token",{"_index":379,"title":{},"body":{"controllers/FcmController.html":{}}}],["post('/topic",{"_index":383,"title":{},"body":{"controllers/FcmController.html":{}}}],["post('log",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":938,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prefix",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FcmController.html":{},"controllers/NotificationsController.html":{},"controllers/SubscribersController.html":{}}}],["primarygeneratedcolumn",{"_index":582,"title":{},"body":{"classes/Notification.html":{},"classes/Subscriber.html":{},"classes/User.html":{}}}],["private",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FcmService.html":{},"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"controllers/NextClientController.html":{},"injectables/NotificationsService.html":{},"injectables/SubscribersService.html":{}}}],["process.env.basic_auth_password",{"_index":310,"title":{},"body":{"guards/BasicAuthGuard.html":{}}}],["process.env.basic_auth_username",{"_index":309,"title":{},"body":{"guards/BasicAuthGuard.html":{}}}],["process.env.development",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["process.env.jwt_refresh_secret_or_key",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtRefreshTokenStrategy.html":{}}}],["process.env.jwt_secret_or_key",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAccessTokenStrategy.html":{}}}],["production",{"_index":878,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":853,"title":{},"body":{"index.html":{}}}],["project",{"_index":889,"title":{},"body":{"index.html":{}}}],["promise",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/BasicAuthGuard.html":{},"controllers/FcmController.html":{},"injectables/FcmService.html":{},"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"controllers/NextClientController.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{}}}],["properties",{"_index":500,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/MessagePayload.html":{},"classes/MulticastRequestDto.html":{},"classes/Notification.html":{},"classes/NotificationResponseDto.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/SingleRequestDto.html":{},"classes/Subscriber.html":{},"classes/SubscriptionRequestDto.html":{},"classes/SubscriptionResponseDto.html":{},"classes/TopicRequestDto.html":{},"classes/TopicsResponseDto.html":{},"classes/User.html":{}}}],["property",{"_index":523,"title":{},"body":{"classes/MatchConstraint.html":{},"miscellaneous/variables.html":{}}}],["propertyname",{"_index":525,"title":{},"body":{"classes/MatchConstraint.html":{},"miscellaneous/variables.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FcmAdminServerModule.html":{},"overview.html":{}}}],["public",{"_index":754,"title":{},"body":{"classes/User.html":{}}}],["push",{"_index":461,"title":{},"body":{"injectables/FcmService.html":{},"index.html":{}}}],["queryrunner",{"_index":432,"title":{},"body":{"injectables/FcmService.html":{},"injectables/NotificationsService.html":{}}}],["queryrunner.committransaction",{"_index":438,"title":{},"body":{"injectables/FcmService.html":{},"injectables/NotificationsService.html":{}}}],["queryrunner.connect",{"_index":434,"title":{},"body":{"injectables/FcmService.html":{},"injectables/NotificationsService.html":{}}}],["queryrunner.manager.delete(notification",{"_index":648,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["queryrunner.release",{"_index":443,"title":{},"body":{"injectables/FcmService.html":{},"injectables/NotificationsService.html":{}}}],["queryrunner.rollbacktransaction",{"_index":440,"title":{},"body":{"injectables/FcmService.html":{},"injectables/NotificationsService.html":{}}}],["queryrunner.starttransaction",{"_index":435,"title":{},"body":{"injectables/FcmService.html":{},"injectables/NotificationsService.html":{}}}],["rate",{"_index":815,"title":{},"body":{"dependencies.html":{}}}],["react",{"_index":831,"title":{},"body":{"dependencies.html":{}}}],["read",{"_index":899,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FcmController.html":{},"injectables/FcmService.html":{},"controllers/NextClientController.html":{},"controllers/NotificationsController.html":{},"controllers/SubscribersController.html":{}}}],["reflect",{"_index":836,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtRefreshTokenGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["refresh(request",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtRefreshTokenStrategy.html":{}}}],["refreshtokencookie",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["registerdecorator",{"_index":518,"title":{},"body":{"classes/MatchConstraint.html":{},"miscellaneous/variables.html":{}}}],["relatedpropertyname",{"_index":530,"title":{},"body":{"classes/MatchConstraint.html":{}}}],["relatedvalue",{"_index":532,"title":{},"body":{"classes/MatchConstraint.html":{}}}],["removerefreshtoken",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{}}}],["removerefreshtoken(username",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{}}}],["renewaccesstoken",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{}}}],["renewaccesstoken(request",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{}}}],["repository",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/NotificationsService.html":{},"injectables/SubscribersService.html":{},"index.html":{}}}],["req",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/NextClientController.html":{},"miscellaneous/variables.html":{}}}],["req.user",{"_index":930,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/BasicAuthGuard.html":{},"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenStrategy.html":{}}}],["request.body",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["request.cookies",{"_index":493,"title":{},"body":{"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenStrategy.html":{}}}],["request.cookies['fcm",{"_index":494,"title":{},"body":{"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenStrategy.html":{}}}],["request.dto",{"_index":364,"title":{},"body":{"controllers/FcmController.html":{},"injectables/FcmService.html":{},"classes/MulticastRequestDto.html":{}}}],["request.dto.ts",{"_index":536,"title":{},"body":{"classes/MulticastRequestDto.html":{},"classes/SignInRequestDto.html":{},"classes/SingleRequestDto.html":{},"classes/SubscriptionRequestDto.html":{},"classes/TopicRequestDto.html":{},"coverage.html":{}}}],["request.dto.ts:11",{"_index":539,"title":{},"body":{"classes/MulticastRequestDto.html":{}}}],["request.dto.ts:12",{"_index":746,"title":{},"body":{"classes/SubscriptionRequestDto.html":{}}}],["request.dto.ts:13",{"_index":677,"title":{},"body":{"classes/SingleRequestDto.html":{},"classes/TopicRequestDto.html":{}}}],["request.dto.ts:15",{"_index":655,"title":{},"body":{"classes/SignInRequestDto.html":{}}}],["request.dto.ts:16",{"_index":744,"title":{},"body":{"classes/SubscriptionRequestDto.html":{}}}],["request.dto.ts:17",{"_index":682,"title":{},"body":{"classes/SingleRequestDto.html":{},"classes/TopicRequestDto.html":{}}}],["request.dto.ts:21",{"_index":745,"title":{},"body":{"classes/SubscriptionRequestDto.html":{}}}],["request.dto.ts:22",{"_index":680,"title":{},"body":{"classes/SingleRequestDto.html":{},"classes/TopicRequestDto.html":{}}}],["request.dto.ts:24",{"_index":742,"title":{},"body":{"classes/SubscriptionRequestDto.html":{}}}],["request.dto.ts:25",{"_index":683,"title":{},"body":{"classes/SingleRequestDto.html":{},"classes/TopicRequestDto.html":{}}}],["request.dto.ts:28",{"_index":679,"title":{},"body":{"classes/SingleRequestDto.html":{}}}],["request.dto.ts:7",{"_index":538,"title":{},"body":{"classes/MulticastRequestDto.html":{},"classes/SignInRequestDto.html":{}}}],["request.dto.ts:8",{"_index":678,"title":{},"body":{"classes/SingleRequestDto.html":{},"classes/TopicRequestDto.html":{}}}],["request.headers['basic",{"_index":305,"title":{},"body":{"guards/BasicAuthGuard.html":{}}}],["requestmethod",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["requestmethod.get",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["res",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/NextClientController.html":{}}}],["reset",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FcmAdminServerModule.html":{},"overview.html":{}}}],["response",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SubscribersService.html":{}}}],["response.dto",{"_index":613,"title":{},"body":{"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{}}}],["response.dto.ts",{"_index":595,"title":{},"body":{"classes/NotificationResponseDto.html":{},"classes/SubscriptionResponseDto.html":{},"classes/TopicsResponseDto.html":{},"coverage.html":{}}}],["response.dto.ts:10",{"_index":597,"title":{},"body":{"classes/NotificationResponseDto.html":{}}}],["response.dto.ts:11",{"_index":599,"title":{},"body":{"classes/NotificationResponseDto.html":{}}}],["response.dto.ts:2",{"_index":748,"title":{},"body":{"classes/SubscriptionResponseDto.html":{},"classes/TopicsResponseDto.html":{}}}],["response.dto.ts:3",{"_index":749,"title":{},"body":{"classes/SubscriptionResponseDto.html":{}}}],["response.dto.ts:4",{"_index":598,"title":{},"body":{"classes/NotificationResponseDto.html":{},"classes/SubscriptionResponseDto.html":{}}}],["response.dto.ts:5",{"_index":600,"title":{},"body":{"classes/NotificationResponseDto.html":{},"classes/SubscriptionResponseDto.html":{}}}],["response.dto.ts:6",{"_index":596,"title":{},"body":{"classes/NotificationResponseDto.html":{},"classes/SubscriptionResponseDto.html":{}}}],["response.dto.ts:7",{"_index":602,"title":{},"body":{"classes/NotificationResponseDto.html":{}}}],["response.dto.ts:8",{"_index":601,"title":{},"body":{"classes/NotificationResponseDto.html":{}}}],["response.dto.ts:9",{"_index":603,"title":{},"body":{"classes/NotificationResponseDto.html":{}}}],["response.map(obj",{"_index":736,"title":{},"body":{"injectables/SubscribersService.html":{}}}],["response.sendstatus(httpstatus.ok",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["response.setheader",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{}}}],["response.setheader('set",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["result",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/BasicAuthGuard.html":{},"modules/FcmAdminServerModule.html":{},"controllers/FcmController.html":{},"injectables/FcmService.html":{},"injectables/JwtAccessTokenGuard.html":{},"injectables/JwtAccessTokenStrategy.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtRefreshTokenGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"classes/MatchConstraint.html":{},"interfaces/MessagePayload.html":{},"classes/MulticastRequestDto.html":{},"controllers/NextClientController.html":{},"classes/Notification.html":{},"classes/NotificationResponseDto.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/SingleRequestDto.html":{},"classes/Subscriber.html":{},"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{},"classes/SubscriptionRequestDto.html":{},"classes/SubscriptionResponseDto.html":{},"classes/TopicRequestDto.html":{},"classes/TopicsResponseDto.html":{},"classes/User.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/BasicAuthGuard.html":{},"modules/FcmAdminServerModule.html":{},"controllers/FcmController.html":{},"injectables/FcmService.html":{},"injectables/JwtAccessTokenGuard.html":{},"injectables/JwtAccessTokenStrategy.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtRefreshTokenGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"classes/MatchConstraint.html":{},"interfaces/MessagePayload.html":{},"classes/MulticastRequestDto.html":{},"controllers/NextClientController.html":{},"classes/Notification.html":{},"classes/NotificationResponseDto.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/SingleRequestDto.html":{},"classes/Subscriber.html":{},"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{},"classes/SubscriptionRequestDto.html":{},"classes/SubscriptionResponseDto.html":{},"classes/TopicRequestDto.html":{},"classes/TopicsResponseDto.html":{},"classes/User.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/BasicAuthGuard.html":{},"controllers/FcmController.html":{},"injectables/FcmService.html":{},"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"classes/MatchConstraint.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/BasicAuthGuard.html":{},"controllers/FcmController.html":{},"injectables/FcmService.html":{},"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"classes/MatchConstraint.html":{},"controllers/NextClientController.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{}}}],["rimraf",{"_index":839,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":873,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":302,"title":{},"body":{"guards/BasicAuthGuard.html":{}}}],["samesite",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{}}}],["save",{"_index":620,"title":{},"body":{"injectables/NotificationsService.html":{},"injectables/SubscribersService.html":{}}}],["save(title",{"_index":628,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["save(username",{"_index":716,"title":{},"body":{"injectables/SubscribersService.html":{}}}],["savemulticastnotifications",{"_index":388,"title":{},"body":{"injectables/FcmService.html":{}}}],["savemulticastnotifications(subscribers",{"_index":396,"title":{},"body":{"injectables/FcmService.html":{}}}],["scalable",{"_index":858,"title":{},"body":{"index.html":{}}}],["scripts",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["secret",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["secretorkey",{"_index":496,"title":{},"body":{"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenStrategy.html":{}}}],["secure",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["select('topic",{"_index":731,"title":{},"body":{"injectables/SubscribersService.html":{}}}],["sending",{"_index":465,"title":{},"body":{"injectables/FcmService.html":{}}}],["sendmulticastpushnotification",{"_index":337,"title":{},"body":{"controllers/FcmController.html":{},"injectables/FcmService.html":{}}}],["sendmulticastpushnotification(multicastnotificationrequestdto",{"_index":400,"title":{},"body":{"injectables/FcmService.html":{}}}],["sendmulticastpushnotification(multicastrequestdto",{"_index":349,"title":{},"body":{"controllers/FcmController.html":{}}}],["sendpushnotificationtodevice",{"_index":338,"title":{},"body":{"controllers/FcmController.html":{},"injectables/FcmService.html":{}}}],["sendpushnotificationtodevice(notificationpayloaddto",{"_index":403,"title":{},"body":{"injectables/FcmService.html":{}}}],["sendpushnotificationtodevice(notificationrequestdto",{"_index":353,"title":{},"body":{"controllers/FcmController.html":{}}}],["sendpushnotificationtotopic",{"_index":339,"title":{},"body":{"controllers/FcmController.html":{},"injectables/FcmService.html":{}}}],["sendpushnotificationtotopic(topicrequestdto",{"_index":358,"title":{},"body":{"controllers/FcmController.html":{},"injectables/FcmService.html":{}}}],["sent",{"_index":462,"title":{},"body":{"injectables/FcmService.html":{}}}],["server",{"_index":859,"title":{},"body":{"index.html":{}}}],["server.module",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["server.module.ts",{"_index":319,"title":{},"body":{"modules/FcmAdminServerModule.html":{}}}],["server/.../enums.ts",{"_index":846,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["server/.../get",{"_index":924,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../match.ts",{"_index":925,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/.../typeorm.config.ts",{"_index":926,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server/app.module.ts",{"_index":20,"title":{},"body":{"modules/AppModule.html":{}}}],["server/app.module.ts:32",{"_index":29,"title":{},"body":{"modules/AppModule.html":{}}}],["server/auth/auth.controller.ts",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["server/auth/auth.controller.ts:21",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{}}}],["server/auth/auth.controller.ts:26",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["server/auth/auth.controller.ts:35",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{}}}],["server/auth/auth.controller.ts:44",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{}}}],["server/auth/auth.module.ts",{"_index":153,"title":{},"body":{"modules/AuthModule.html":{}}}],["server/auth/auth.service.ts",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["server/auth/auth.service.ts:121",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{}}}],["server/auth/auth.service.ts:146",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{}}}],["server/auth/auth.service.ts:156",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{}}}],["server/auth/auth.service.ts:163",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{}}}],["server/auth/auth.service.ts:173",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{}}}],["server/auth/auth.service.ts:22",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{}}}],["server/auth/auth.service.ts:28",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{}}}],["server/auth/auth.service.ts:45",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{}}}],["server/auth/auth.service.ts:61",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{}}}],["server/auth/auth.service.ts:68",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{}}}],["server/auth/auth.service.ts:80",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{}}}],["server/auth/auth.service.ts:87",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{}}}],["server/auth/get",{"_index":767,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/auth/guards/basic",{"_index":290,"title":{},"body":{"guards/BasicAuthGuard.html":{},"coverage.html":{}}}],["server/auth/guards/jwt",{"_index":476,"title":{},"body":{"injectables/JwtAccessTokenGuard.html":{},"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["server/common/config/.env",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["server/common/config/typeorm.config.ts",{"_index":773,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/common/dtos/multicast",{"_index":535,"title":{},"body":{"classes/MulticastRequestDto.html":{},"coverage.html":{}}}],["server/common/dtos/notification",{"_index":594,"title":{},"body":{"classes/NotificationResponseDto.html":{},"coverage.html":{}}}],["server/common/dtos/sign",{"_index":650,"title":{},"body":{"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"coverage.html":{}}}],["server/common/dtos/single",{"_index":675,"title":{},"body":{"classes/SingleRequestDto.html":{},"coverage.html":{}}}],["server/common/dtos/subscription",{"_index":740,"title":{},"body":{"classes/SubscriptionRequestDto.html":{},"classes/SubscriptionResponseDto.html":{},"coverage.html":{}}}],["server/common/dtos/topic",{"_index":750,"title":{},"body":{"classes/TopicRequestDto.html":{},"coverage.html":{}}}],["server/common/dtos/topics",{"_index":751,"title":{},"body":{"classes/TopicsResponseDto.html":{},"coverage.html":{}}}],["server/common/entities/notification.entity.ts",{"_index":576,"title":{},"body":{"classes/Notification.html":{},"coverage.html":{}}}],["server/common/entities/notification.entity.ts:10",{"_index":585,"title":{},"body":{"classes/Notification.html":{}}}],["server/common/entities/notification.entity.ts:13",{"_index":580,"title":{},"body":{"classes/Notification.html":{}}}],["server/common/entities/notification.entity.ts:16",{"_index":588,"title":{},"body":{"classes/Notification.html":{}}}],["server/common/entities/notification.entity.ts:19",{"_index":586,"title":{},"body":{"classes/Notification.html":{}}}],["server/common/entities/notification.entity.ts:22",{"_index":589,"title":{},"body":{"classes/Notification.html":{}}}],["server/common/entities/notification.entity.ts:25",{"_index":581,"title":{},"body":{"classes/Notification.html":{}}}],["server/common/entities/notification.entity.ts:28",{"_index":584,"title":{},"body":{"classes/Notification.html":{}}}],["server/common/entities/notification.entity.ts:7",{"_index":583,"title":{},"body":{"classes/Notification.html":{}}}],["server/common/entities/subscriber.entity.ts",{"_index":687,"title":{},"body":{"classes/Subscriber.html":{},"coverage.html":{}}}],["server/common/entities/subscriber.entity.ts:10",{"_index":692,"title":{},"body":{"classes/Subscriber.html":{}}}],["server/common/entities/subscriber.entity.ts:13",{"_index":690,"title":{},"body":{"classes/Subscriber.html":{}}}],["server/common/entities/subscriber.entity.ts:16",{"_index":691,"title":{},"body":{"classes/Subscriber.html":{}}}],["server/common/entities/subscriber.entity.ts:19",{"_index":689,"title":{},"body":{"classes/Subscriber.html":{}}}],["server/common/entities/subscriber.entity.ts:7",{"_index":688,"title":{},"body":{"classes/Subscriber.html":{}}}],["server/common/entities/user.entity.ts",{"_index":753,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["server/common/entities/user.entity.ts:10",{"_index":758,"title":{},"body":{"classes/User.html":{}}}],["server/common/entities/user.entity.ts:13",{"_index":757,"title":{},"body":{"classes/User.html":{}}}],["server/common/entities/user.entity.ts:16",{"_index":755,"title":{},"body":{"classes/User.html":{}}}],["server/common/entities/user.entity.ts:7",{"_index":756,"title":{},"body":{"classes/User.html":{}}}],["server/common/enums.ts",{"_index":847,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["server/common/interfaces.ts",{"_index":499,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/MessagePayload.html":{},"coverage.html":{}}}],["server/common/validators/match.ts",{"_index":512,"title":{},"body":{"classes/MatchConstraint.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server/common/validators/match.ts:26",{"_index":517,"title":{},"body":{"classes/MatchConstraint.html":{}}}],["server/controllers/fcm.controller.ts",{"_index":334,"title":{},"body":{"controllers/FcmController.html":{},"coverage.html":{}}}],["server/controllers/fcm.controller.ts:17",{"_index":348,"title":{},"body":{"controllers/FcmController.html":{}}}],["server/controllers/fcm.controller.ts:28",{"_index":345,"title":{},"body":{"controllers/FcmController.html":{}}}],["server/controllers/fcm.controller.ts:39",{"_index":356,"title":{},"body":{"controllers/FcmController.html":{}}}],["server/controllers/fcm.controller.ts:50",{"_index":352,"title":{},"body":{"controllers/FcmController.html":{}}}],["server/controllers/fcm.controller.ts:61",{"_index":361,"title":{},"body":{"controllers/FcmController.html":{}}}],["server/controllers/notifications.controller.ts",{"_index":604,"title":{},"body":{"controllers/NotificationsController.html":{},"coverage.html":{}}}],["server/controllers/notifications.controller.ts:19",{"_index":611,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["server/controllers/notifications.controller.ts:25",{"_index":609,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["server/controllers/subscriberscontroller.ts",{"_index":696,"title":{},"body":{"controllers/SubscribersController.html":{},"coverage.html":{}}}],["server/controllers/subscriberscontroller.ts:13",{"_index":698,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["server/controllers/subscriberscontroller.ts:18",{"_index":700,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["server/fcm",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/FcmAdminServerModule.html":{},"controllers/FcmController.html":{},"injectables/FcmService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{},"coverage.html":{}}}],["server/next",{"_index":544,"title":{},"body":{"controllers/NextClientController.html":{},"coverage.html":{}}}],["server/services/fcm.service.ts",{"_index":385,"title":{},"body":{"injectables/FcmService.html":{},"coverage.html":{}}}],["server/services/fcm.service.ts:159",{"_index":401,"title":{},"body":{"injectables/FcmService.html":{}}}],["server/services/fcm.service.ts:196",{"_index":406,"title":{},"body":{"injectables/FcmService.html":{}}}],["server/services/fcm.service.ts:21",{"_index":391,"title":{},"body":{"injectables/FcmService.html":{}}}],["server/services/fcm.service.ts:246",{"_index":398,"title":{},"body":{"injectables/FcmService.html":{}}}],["server/services/fcm.service.ts:30",{"_index":395,"title":{},"body":{"injectables/FcmService.html":{}}}],["server/services/fcm.service.ts:37",{"_index":394,"title":{},"body":{"injectables/FcmService.html":{}}}],["server/services/fcm.service.ts:65",{"_index":393,"title":{},"body":{"injectables/FcmService.html":{}}}],["server/services/fcm.service.ts:99",{"_index":404,"title":{},"body":{"injectables/FcmService.html":{}}}],["server/services/notifications.service.ts",{"_index":618,"title":{},"body":{"injectables/NotificationsService.html":{},"coverage.html":{}}}],["server/services/notifications.service.ts:13",{"_index":622,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["server/services/notifications.service.ts:20",{"_index":625,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["server/services/notifications.service.ts:27",{"_index":629,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["server/services/notifications.service.ts:52",{"_index":627,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["server/services/notifications.service.ts:68",{"_index":624,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["server/services/subscribers.service.ts",{"_index":706,"title":{},"body":{"injectables/SubscribersService.html":{},"coverage.html":{}}}],["server/services/subscribers.service.ts:13",{"_index":710,"title":{},"body":{"injectables/SubscribersService.html":{}}}],["server/services/subscribers.service.ts:19",{"_index":712,"title":{},"body":{"injectables/SubscribersService.html":{}}}],["server/services/subscribers.service.ts:29",{"_index":717,"title":{},"body":{"injectables/SubscribersService.html":{}}}],["server/services/subscribers.service.ts:49",{"_index":713,"title":{},"body":{"injectables/SubscribersService.html":{}}}],["server/services/subscribers.service.ts:64",{"_index":719,"title":{},"body":{"injectables/SubscribersService.html":{}}}],["server/services/subscribers.service.ts:73",{"_index":715,"title":{},"body":{"injectables/SubscribersService.html":{}}}],["serverresponse",{"_index":552,"title":{},"body":{"controllers/NextClientController.html":{}}}],["serviceaccount",{"_index":409,"title":{},"body":{"injectables/FcmService.html":{}}}],["services/fcm.service",{"_index":329,"title":{},"body":{"modules/FcmAdminServerModule.html":{},"controllers/FcmController.html":{}}}],["services/notifications.service",{"_index":330,"title":{},"body":{"modules/FcmAdminServerModule.html":{},"controllers/NotificationsController.html":{}}}],["services/subscribers.service",{"_index":328,"title":{},"body":{"modules/FcmAdminServerModule.html":{},"controllers/SubscribersController.html":{}}}],["set",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["setcookies",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{}}}],["setcookies(accesstoken",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{}}}],["setcurrentrefreshtoken",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{}}}],["setcurrentrefreshtoken(refreshtoken",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{}}}],["showlistnotificationspage",{"_index":546,"title":{},"body":{"controllers/NextClientController.html":{}}}],["showlistnotificationspage(req",{"_index":550,"title":{},"body":{"controllers/NextClientController.html":{}}}],["showlistsubscriberspage",{"_index":547,"title":{},"body":{"controllers/NextClientController.html":{}}}],["showlistsubscriberspage(req",{"_index":556,"title":{},"body":{"controllers/NextClientController.html":{}}}],["showloginpage",{"_index":548,"title":{},"body":{"controllers/NextClientController.html":{}}}],["showloginpage(@req",{"_index":566,"title":{},"body":{"controllers/NextClientController.html":{}}}],["showloginpage(req",{"_index":558,"title":{},"body":{"controllers/NextClientController.html":{}}}],["shownotificationspage",{"_index":549,"title":{},"body":{"controllers/NextClientController.html":{}}}],["shownotificationspage(req",{"_index":560,"title":{},"body":{"controllers/NextClientController.html":{}}}],["side",{"_index":860,"title":{},"body":{"index.html":{}}}],["sign",{"_index":569,"title":{},"body":{"controllers/NextClientController.html":{}}}],["signinrequestdto",{"_index":649,"title":{"classes/SignInRequestDto.html":{}},"body":{"classes/SignInRequestDto.html":{},"coverage.html":{}}}],["signup",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signup(@body",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(signupdto",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signupdto",{"_index":107,"title":{"classes/SignUpDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignUpDto.html":{},"coverage.html":{}}}],["single",{"_index":542,"title":{},"body":{"classes/MulticastRequestDto.html":{},"miscellaneous/enumerations.html":{}}}],["singlerequestdto",{"_index":354,"title":{"classes/SingleRequestDto.html":{}},"body":{"controllers/FcmController.html":{},"injectables/FcmService.html":{},"classes/MulticastRequestDto.html":{},"classes/SingleRequestDto.html":{},"coverage.html":{}}}],["source",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/BasicAuthGuard.html":{},"modules/FcmAdminServerModule.html":{},"controllers/FcmController.html":{},"injectables/FcmService.html":{},"injectables/JwtAccessTokenGuard.html":{},"injectables/JwtAccessTokenStrategy.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtRefreshTokenGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"classes/MatchConstraint.html":{},"interfaces/MessagePayload.html":{},"classes/MulticastRequestDto.html":{},"controllers/NextClientController.html":{},"classes/Notification.html":{},"classes/NotificationResponseDto.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/SingleRequestDto.html":{},"classes/Subscriber.html":{},"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{},"classes/SubscriptionRequestDto.html":{},"classes/SubscriptionResponseDto.html":{},"classes/TopicRequestDto.html":{},"classes/TopicsResponseDto.html":{},"classes/User.html":{},"index.html":{}}}],["sponsors",{"_index":892,"title":{},"body":{"index.html":{}}}],["start",{"_index":874,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":877,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":879,"title":{},"body":{"index.html":{}}}],["started",{"_index":852,"title":{"index.html":{}},"body":{}}],["starter",{"_index":868,"title":{},"body":{"index.html":{}}}],["statements",{"_index":763,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{},"guards/BasicAuthGuard.html":{},"injectables/FcmService.html":{}}}],["status",{"_index":578,"title":{},"body":{"classes/Notification.html":{},"classes/NotificationResponseDto.html":{},"injectables/NotificationsService.html":{}}}],["stay",{"_index":902,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":487,"title":{},"body":{"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenStrategy.html":{}}}],["strict",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["string",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{},"guards/BasicAuthGuard.html":{},"interfaces/JwtPayload.html":{},"classes/MatchConstraint.html":{},"interfaces/MessagePayload.html":{},"classes/MulticastRequestDto.html":{},"classes/Notification.html":{},"classes/NotificationResponseDto.html":{},"injectables/NotificationsService.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/SingleRequestDto.html":{},"classes/Subscriber.html":{},"injectables/SubscribersService.html":{},"classes/SubscriptionRequestDto.html":{},"classes/SubscriptionResponseDto.html":{},"classes/TopicRequestDto.html":{},"classes/TopicsResponseDto.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["subscribed",{"_index":431,"title":{},"body":{"injectables/FcmService.html":{},"classes/Subscriber.html":{},"injectables/SubscribersService.html":{},"classes/SubscriptionRequestDto.html":{},"classes/SubscriptionResponseDto.html":{}}}],["subscriber",{"_index":331,"title":{"classes/Subscriber.html":{}},"body":{"modules/FcmAdminServerModule.html":{},"injectables/FcmService.html":{},"classes/Subscriber.html":{},"injectables/SubscribersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["subscriber.subscribed",{"_index":450,"title":{},"body":{"injectables/FcmService.html":{},"injectables/SubscribersService.html":{}}}],["subscriber.token",{"_index":728,"title":{},"body":{"injectables/SubscribersService.html":{}}}],["subscriber.topic",{"_index":729,"title":{},"body":{"injectables/SubscribersService.html":{}}}],["subscriber.username",{"_index":727,"title":{},"body":{"injectables/SubscribersService.html":{}}}],["subscriberrepository",{"_index":711,"title":{},"body":{"injectables/SubscribersService.html":{}}}],["subscribers",{"_index":399,"title":{},"body":{"injectables/FcmService.html":{},"classes/MulticastRequestDto.html":{},"controllers/NextClientController.html":{},"controllers/SubscribersController.html":{}}}],["subscribers.foreach(subscriber",{"_index":475,"title":{},"body":{"injectables/FcmService.html":{}}}],["subscribers.service",{"_index":413,"title":{},"body":{"injectables/FcmService.html":{}}}],["subscribers[0].body",{"_index":468,"title":{},"body":{"injectables/FcmService.html":{}}}],["subscribers[0].title",{"_index":467,"title":{},"body":{"injectables/FcmService.html":{}}}],["subscriberscontroller",{"_index":322,"title":{"controllers/SubscribersController.html":{}},"body":{"modules/FcmAdminServerModule.html":{},"controllers/SubscribersController.html":{},"coverage.html":{}}}],["subscribersservice",{"_index":318,"title":{"injectables/SubscribersService.html":{}},"body":{"modules/FcmAdminServerModule.html":{},"injectables/FcmService.html":{},"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{},"coverage.html":{},"overview.html":{}}}],["subscribing",{"_index":441,"title":{},"body":{"injectables/FcmService.html":{}}}],["subscription",{"_index":377,"title":{},"body":{"controllers/FcmController.html":{},"injectables/SubscribersService.html":{}}}],["subscription')@httpcode(200",{"_index":344,"title":{},"body":{"controllers/FcmController.html":{}}}],["subscriptionrequestdto",{"_index":341,"title":{"classes/SubscriptionRequestDto.html":{}},"body":{"controllers/FcmController.html":{},"injectables/FcmService.html":{},"classes/SubscriptionRequestDto.html":{},"coverage.html":{}}}],["subscriptionresponsedto",{"_index":701,"title":{"classes/SubscriptionResponseDto.html":{}},"body":{"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{},"classes/SubscriptionResponseDto.html":{},"coverage.html":{}}}],["subscriptions",{"_index":721,"title":{},"body":{"injectables/SubscribersService.html":{}}}],["subscriptions.map",{"_index":726,"title":{},"body":{"injectables/SubscribersService.html":{}}}],["success",{"_index":397,"title":{},"body":{"injectables/FcmService.html":{}}}],["successfully",{"_index":439,"title":{},"body":{"injectables/FcmService.html":{}}}],["super",{"_index":490,"title":{},"body":{"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenStrategy.html":{}}}],["support",{"_index":893,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":914,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":933,"title":{},"body":{"miscellaneous/variables.html":{}}}],["system",{"_index":912,"title":{},"body":{"index.html":{}}}],["table",{"_index":781,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":780,"title":{},"body":{"coverage.html":{}}}],["target",{"_index":526,"title":{},"body":{"classes/MatchConstraint.html":{},"miscellaneous/variables.html":{}}}],["test",{"_index":882,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":885,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":884,"title":{},"body":{"index.html":{}}}],["tests",{"_index":881,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":891,"title":{},"body":{"index.html":{}}}],["this.authservice.getcookiesforlogout",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.getuserifrefreshtokenmatches",{"_index":508,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["this.authservice.isadminuser",{"_index":568,"title":{},"body":{"controllers/NextClientController.html":{}}}],["this.authservice.login(request",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.removerefreshtoken(username",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.renewaccesstoken(request",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(signupdto",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.connection.createqueryrunner",{"_index":433,"title":{},"body":{"injectables/FcmService.html":{},"injectables/NotificationsService.html":{}}}],["this.fcmservice.admintogglesubscriptiontotopic",{"_index":378,"title":{},"body":{"controllers/FcmController.html":{}}}],["this.fcmservice.clientsubscriptiontotopic",{"_index":375,"title":{},"body":{"controllers/FcmController.html":{}}}],["this.fcmservice.sendmulticastpushnotification",{"_index":382,"title":{},"body":{"controllers/FcmController.html":{}}}],["this.fcmservice.sendpushnotificationtodevice",{"_index":380,"title":{},"body":{"controllers/FcmController.html":{}}}],["this.fcmservice.sendpushnotificationtotopic(topicrequestdto",{"_index":384,"title":{},"body":{"controllers/FcmController.html":{}}}],["this.findbyid(id",{"_index":647,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.getaccesstoken",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.getaccesstoken(payload",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.getrefreshtoken(payload",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(payload",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.next.render('/compose",{"_index":575,"title":{},"body":{"controllers/NextClientController.html":{}}}],["this.next.render('/list",{"_index":573,"title":{},"body":{"controllers/NextClientController.html":{}}}],["this.next.render(`/${url",{"_index":571,"title":{},"body":{"controllers/NextClientController.html":{}}}],["this.notificationrepository.find",{"_index":631,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.notificationrepository.findone",{"_index":646,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.notificationrepository.save(notification",{"_index":641,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.notificationsservice.deletebyid(ids",{"_index":617,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["this.notificationsservice.findall",{"_index":614,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["this.notificationsservice.save",{"_index":459,"title":{},"body":{"injectables/FcmService.html":{}}}],["this.savemulticastnotifications(subscribers",{"_index":470,"title":{},"body":{"injectables/FcmService.html":{}}}],["this.setcurrentrefreshtoken(refreshtoken",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.subscriberrepository",{"_index":722,"title":{},"body":{"injectables/SubscribersService.html":{}}}],["this.subscriberrepository.findone",{"_index":739,"title":{},"body":{"injectables/SubscribersService.html":{}}}],["this.subscriberrepository.save(subscriber",{"_index":730,"title":{},"body":{"injectables/SubscribersService.html":{}}}],["this.subscribersservice.findall",{"_index":704,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["this.subscribersservice.findalltopics",{"_index":705,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["this.subscribersservice.findbyusername",{"_index":430,"title":{},"body":{"injectables/FcmService.html":{}}}],["this.subscribersservice.findbyusername(username",{"_index":444,"title":{},"body":{"injectables/FcmService.html":{}}}],["this.subscribersservice.save(username",{"_index":437,"title":{},"body":{"injectables/FcmService.html":{}}}],["this.subscribersservice.update(username",{"_index":451,"title":{},"body":{"injectables/FcmService.html":{}}}],["this.userrepository",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userrepository.findone",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAccessTokenStrategy.html":{}}}],["this.userrepository.save(userentity",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userrepository.update(id",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userrepository.update(user.id",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FcmService.html":{},"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/NotificationsService.html":{},"injectables/SubscribersService.html":{}}}],["title",{"_index":456,"title":{},"body":{"injectables/FcmService.html":{},"interfaces/JwtPayload.html":{},"interfaces/MessagePayload.html":{},"classes/Notification.html":{},"classes/NotificationResponseDto.html":{},"injectables/NotificationsService.html":{},"classes/SingleRequestDto.html":{},"classes/TopicRequestDto.html":{}}}],["toggle",{"_index":343,"title":{},"body":{"controllers/FcmController.html":{}}}],["token",{"_index":163,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/FcmService.html":{},"injectables/JwtAccessTokenGuard.html":{},"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"classes/SingleRequestDto.html":{},"classes/Subscriber.html":{},"injectables/SubscribersService.html":{},"classes/SubscriptionRequestDto.html":{},"classes/SubscriptionResponseDto.html":{}}}],["token.guard",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FcmController.html":{},"controllers/NextClientController.html":{},"controllers/NotificationsController.html":{},"controllers/SubscribersController.html":{}}}],["token.guard.ts",{"_index":477,"title":{},"body":{"injectables/JwtAccessTokenGuard.html":{},"injectables/JwtRefreshTokenGuard.html":{},"coverage.html":{}}}],["token.strategy",{"_index":159,"title":{},"body":{"modules/AuthModule.html":{}}}],["token.strategy.ts",{"_index":481,"title":{},"body":{"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["token.strategy.ts:14",{"_index":483,"title":{},"body":{"injectables/JwtAccessTokenStrategy.html":{}}}],["token.strategy.ts:15",{"_index":502,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["token.strategy.ts:28",{"_index":485,"title":{},"body":{"injectables/JwtAccessTokenStrategy.html":{}}}],["token.strategy.ts:31",{"_index":504,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["tokens",{"_index":466,"title":{},"body":{"injectables/FcmService.html":{},"classes/MulticastRequestDto.html":{}}}],["topic",{"_index":429,"title":{},"body":{"injectables/FcmService.html":{},"classes/Notification.html":{},"classes/NotificationResponseDto.html":{},"injectables/NotificationsService.html":{},"classes/SingleRequestDto.html":{},"classes/Subscriber.html":{},"injectables/SubscribersService.html":{},"classes/SubscriptionRequestDto.html":{},"classes/SubscriptionResponseDto.html":{},"classes/TopicRequestDto.html":{},"miscellaneous/enumerations.html":{}}}],["topicrequestdto",{"_index":359,"title":{"classes/TopicRequestDto.html":{}},"body":{"controllers/FcmController.html":{},"injectables/FcmService.html":{},"classes/TopicRequestDto.html":{},"coverage.html":{}}}],["topics",{"_index":752,"title":{},"body":{"classes/TopicsResponseDto.html":{}}}],["topicsresponsedto",{"_index":702,"title":{"classes/TopicsResponseDto.html":{}},"body":{"controllers/SubscribersController.html":{},"injectables/SubscribersService.html":{},"classes/TopicsResponseDto.html":{},"coverage.html":{}}}],["tostring('ascii",{"_index":307,"title":{},"body":{"guards/BasicAuthGuard.html":{}}}],["touch",{"_index":903,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":806,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/FcmService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/NotificationsService.html":{},"injectables/SubscribersService.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FcmService.html":{},"injectables/NotificationsService.html":{},"injectables/SubscribersService.html":{}}}],["twitter",{"_index":909,"title":{},"body":{"index.html":{}}}],["type",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/BasicAuthGuard.html":{},"controllers/FcmController.html":{},"injectables/FcmService.html":{},"injectables/JwtAccessTokenStrategy.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"classes/MatchConstraint.html":{},"interfaces/MessagePayload.html":{},"classes/MulticastRequestDto.html":{},"controllers/NextClientController.html":{},"classes/Notification.html":{},"classes/NotificationResponseDto.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/SingleRequestDto.html":{},"classes/Subscriber.html":{},"injectables/SubscribersService.html":{},"classes/SubscriptionRequestDto.html":{},"classes/SubscriptionResponseDto.html":{},"classes/TopicRequestDto.html":{},"classes/TopicsResponseDto.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FcmService.html":{},"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"classes/Notification.html":{},"injectables/NotificationsService.html":{},"classes/Subscriber.html":{},"injectables/SubscribersService.html":{},"classes/User.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FcmAdminServerModule.html":{}}}],["typeormmodule.forfeature([notification",{"_index":333,"title":{},"body":{"modules/FcmAdminServerModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["typeormmodule.forroot(typeormpostgresconfig",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":931,"title":{},"body":{"miscellaneous/variables.html":{}}}],["typeormmongoconfig",{"_index":774,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeormpostgresconfig",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["types/bcrypt",{"_index":799,"title":{},"body":{"dependencies.html":{}}}],["types/mongodb",{"_index":801,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":867,"title":{},"body":{"index.html":{}}}],["ui/core",{"_index":784,"title":{},"body":{"dependencies.html":{}}}],["ui/icons",{"_index":786,"title":{},"body":{"dependencies.html":{}}}],["ui/lab",{"_index":788,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenStrategy.html":{}}}],["unauthorizedexception('invalid",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{}}}],["undefined",{"_index":445,"title":{},"body":{"injectables/FcmService.html":{}}}],["unfetch",{"_index":823,"title":{},"body":{"dependencies.html":{}}}],["unique",{"_index":693,"title":{},"body":{"classes/Subscriber.html":{},"classes/User.html":{}}}],["unique(['username",{"_index":695,"title":{},"body":{"classes/Subscriber.html":{},"classes/User.html":{}}}],["unit",{"_index":880,"title":{},"body":{"index.html":{}}}],["unsubscribed",{"_index":452,"title":{},"body":{"injectables/FcmService.html":{}}}],["up",{"_index":570,"title":{},"body":{"controllers/NextClientController.html":{}}}],["up.dto",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["up.dto.ts",{"_index":664,"title":{},"body":{"classes/SignUpDto.html":{},"coverage.html":{}}}],["up.dto.ts:16",{"_index":669,"title":{},"body":{"classes/SignUpDto.html":{}}}],["up.dto.ts:22",{"_index":668,"title":{},"body":{"classes/SignUpDto.html":{}}}],["up.dto.ts:8",{"_index":671,"title":{},"body":{"classes/SignUpDto.html":{}}}],["update",{"_index":708,"title":{},"body":{"injectables/SubscribersService.html":{}}}],["update(username",{"_index":718,"title":{},"body":{"injectables/SubscribersService.html":{}}}],["url",{"_index":567,"title":{},"body":{"controllers/NextClientController.html":{},"miscellaneous/variables.html":{}}}],["useguards",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FcmController.html":{},"controllers/NextClientController.html":{},"controllers/NotificationsController.html":{},"controllers/SubscribersController.html":{}}}],["useguards(basicauthguard",{"_index":372,"title":{},"body":{"controllers/FcmController.html":{}}}],["useguards(basicauthguard)@post('/subscribe')@httpcode(200",{"_index":347,"title":{},"body":{"controllers/FcmController.html":{}}}],["useguards(jwtaccesstokenguard",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FcmController.html":{},"controllers/NextClientController.html":{},"controllers/NotificationsController.html":{},"controllers/SubscribersController.html":{}}}],["useguards(jwtaccesstokenguard)@get('/compose",{"_index":561,"title":{},"body":{"controllers/NextClientController.html":{}}}],["useguards(jwtaccesstokenguard)@get('/list",{"_index":553,"title":{},"body":{"controllers/NextClientController.html":{}}}],["useguards(jwtaccesstokenguard)@post('/admin",{"_index":342,"title":{},"body":{"controllers/FcmController.html":{}}}],["useguards(jwtaccesstokenguard)@post('/multicast')@httpcode(200",{"_index":351,"title":{},"body":{"controllers/FcmController.html":{}}}],["useguards(jwtaccesstokenguard)@post('/token')@httpcode(200",{"_index":355,"title":{},"body":{"controllers/FcmController.html":{}}}],["useguards(jwtaccesstokenguard)@post('/topic')@httpcode(200",{"_index":360,"title":{},"body":{"controllers/FcmController.html":{}}}],["useguards(jwtaccesstokenguard)@post('log",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtrefreshtokenguard",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtrefreshtokenguard)@post('/refresh",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":53,"title":{"classes/User.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.currenthashedrefreshtoken",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.decorator.ts",{"_index":768,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.id",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["userentity",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["userentity.currenthashedrefreshtoken",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["userentity.password",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["userentity.username",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["username",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/BasicAuthGuard.html":{},"injectables/FcmService.html":{},"injectables/JwtAccessTokenStrategy.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"interfaces/MessagePayload.html":{},"classes/Notification.html":{},"classes/NotificationResponseDto.html":{},"injectables/NotificationsService.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/SingleRequestDto.html":{},"classes/Subscriber.html":{},"injectables/SubscribersService.html":{},"classes/SubscriptionRequestDto.html":{},"classes/SubscriptionResponseDto.html":{},"classes/TopicRequestDto.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["userrepository",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenStrategy.html":{}}}],["useunifiedtopology",{"_index":934,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uuid",{"_index":842,"title":{},"body":{"dependencies.html":{}}}],["validate",{"_index":482,"title":{},"body":{"injectables/JwtAccessTokenStrategy.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"classes/MatchConstraint.html":{}}}],["validate(payload",{"_index":484,"title":{},"body":{"injectables/JwtAccessTokenStrategy.html":{}}}],["validate(request",{"_index":503,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["validate(value",{"_index":514,"title":{},"body":{"classes/MatchConstraint.html":{}}}],["validaterequest",{"_index":293,"title":{},"body":{"guards/BasicAuthGuard.html":{}}}],["validaterequest(request",{"_index":300,"title":{},"body":{"guards/BasicAuthGuard.html":{}}}],["validationarguments",{"_index":516,"title":{},"body":{"classes/MatchConstraint.html":{}}}],["validationoptions",{"_index":519,"title":{},"body":{"classes/MatchConstraint.html":{},"miscellaneous/variables.html":{}}}],["validator",{"_index":521,"title":{},"body":{"classes/MatchConstraint.html":{},"classes/MulticastRequestDto.html":{},"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{},"classes/SingleRequestDto.html":{},"classes/SubscriptionRequestDto.html":{},"classes/TopicRequestDto.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["validatorconstraint",{"_index":520,"title":{},"body":{"classes/MatchConstraint.html":{}}}],["validatorconstraintinterface",{"_index":513,"title":{},"body":{"classes/MatchConstraint.html":{}}}],["validators/match",{"_index":672,"title":{},"body":{"classes/SignUpDto.html":{}}}],["value",{"_index":448,"title":{},"body":{"injectables/FcmService.html":{},"classes/MatchConstraint.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":769,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":923,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["void",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"injectables/FcmService.html":{}}}],["watch",{"_index":875,"title":{},"body":{"index.html":{}}}],["weak",{"_index":654,"title":{},"body":{"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{}}}],["website",{"_index":907,"title":{},"body":{"index.html":{}}}],["where('subscriber.subscribed",{"_index":724,"title":{},"body":{"injectables/SubscribersService.html":{}}}],["window",{"_index":834,"title":{},"body":{"dependencies.html":{}}}],["yes",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{}}}],["you'd",{"_index":896,"title":{},"body":{"index.html":{}}}],["z",{"_index":653,"title":{},"body":{"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{}}}],["z])(?=.*[a",{"_index":652,"title":{},"body":{"classes/SignInRequestDto.html":{},"classes/SignUpDto.html":{}}}],["zoom",{"_index":14,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FcmAdminServerModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nFcmAdminServerModule\n\nFcmAdminServerModule\n\nAppModule -->\n\nFcmAdminServerModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            NextClientController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            FcmAdminServerModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            configure\n                        \n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in server/app.module.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import {\n  MiddlewareConsumer,\n  Module,\n  NestModule,\n  RequestMethod,\n} from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { NextMiddleware, NextModule } from '@nestpress/next';\nimport { typeOrmPostgresConfig } from './common/config/typeorm.config';\nimport { AuthModule } from './auth/auth.module';\nimport { FcmAdminServerModule } from './fcm-admin-server/fcm-admin-server.module';\nimport { User } from './common/entities/user.entity';\nimport { NextClientController } from './next-client.controller';\nimport { ConfigModule } from '@nestjs/config';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: './server/common/config/.env',\n    }),\n    TypeOrmModule.forRoot(typeOrmPostgresConfig),\n    TypeOrmModule.forFeature([User]),\n    NextModule,\n    AuthModule,\n    FcmAdminServerModule,\n  ],\n  controllers: [NextClientController],\n  providers: [],\n})\nexport class AppModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    // handle scripts\n    consumer.apply(NextMiddleware).forRoutes({\n      path: '_next*',\n      method: RequestMethod.GET,\n    });\n\n    // handle other assets\n    consumer.apply(NextMiddleware).forRoutes({\n      path: 'images/*',\n      method: RequestMethod.GET,\n    });\n\n    consumer.apply(NextMiddleware).forRoutes({\n      path: 'favicon.ico',\n      method: RequestMethod.GET,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logOut\n                            \n                            \n                                refresh\n                            \n                            \n                                    Async\n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(request: Request, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/login')\n                \n            \n\n            \n                \n                    Defined in server/auth/auth.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            logOut\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    logOut(request: Request, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAccessTokenGuard)@Post('log-out')\n                \n            \n\n            \n                \n                    Defined in server/auth/auth.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            refresh\n                        \n                        \n                    \n                \n            \n            \n                \nrefresh(request: Request, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtRefreshTokenGuard)@Post('/refresh')\n                \n            \n\n            \n                \n                    Defined in server/auth/auth.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(signUpDto: SignUpDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signup')\n                \n            \n\n            \n                \n                    Defined in server/auth/auth.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signUpDto\n                                    \n                                                SignUpDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  HttpStatus,\n  Post,\n  Req,\n  Res,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { SignUpDto } from '../common/dtos/sign-up.dto';\nimport JwtRefreshTokenGuard from './guards/jwt-refresh-token.guard';\nimport { Request, Response } from 'express';\nimport JwtAccessTokenGuard from './guards/jwt-access-token.guard';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post('/signup')\n  async signUp(@Body() signUpDto: SignUpDto): Promise {\n    return await this.authService.signUp(signUpDto);\n  }\n\n  @Post('/login')\n  async login(\n    @Req() request: Request,\n    @Res() response: Response,\n  ): Promise {\n    return await this.authService.login(request, response);\n  }\n\n  @UseGuards(JwtRefreshTokenGuard)\n  @Post('/refresh')\n  refresh(\n    @Req() request: Request,\n    @Res() response: Response,\n  ): Promise {\n    return this.authService.renewAccessToken(request, response);\n  }\n\n  @UseGuards(JwtAccessTokenGuard)\n  @Post('log-out')\n  async logOut(@Req() request: Request, @Res() response: Response) {\n    const { username } = request.body;\n    await this.authService.removeRefreshToken(username);\n    response.setHeader('Set-Cookie', this.authService.getCookiesForLogOut());\n    return response.sendStatus(HttpStatus.OK);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nJwtAccessTokenStrategy \n\nJwtAccessTokenStrategy \n\n\n\nJwtRefreshTokenStrategy \n\nJwtRefreshTokenStrategy \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\nJwtAccessTokenStrategy  -->\n\nAuthModule->JwtAccessTokenStrategy \n\n\n\nJwtRefreshTokenStrategy  -->\n\nAuthModule->JwtRefreshTokenStrategy \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtAccessTokenStrategy\n\nJwtAccessTokenStrategy\n\nAuthModule -->\n\nJwtAccessTokenStrategy->AuthModule\n\n\n\n\n\nJwtRefreshTokenStrategy\n\nJwtRefreshTokenStrategy\n\nAuthModule -->\n\nJwtRefreshTokenStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtAccessTokenStrategy\n                        \n                        \n                            JwtRefreshTokenStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtAccessTokenStrategy\n                        \n                        \n                            JwtRefreshTokenStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from '../common/entities/user.entity';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { JwtAccessTokenStrategy } from './guards/jwt-access-token.strategy';\nimport { JwtRefreshTokenStrategy } from './guards/jwt-refresh-token.strategy';\n\n@Module({\n  imports: [\n    PassportModule.register({ defaultStrategy: 'jwt-access-token' }),\n    JwtModule.register({}),\n    TypeOrmModule.forFeature([User]),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtAccessTokenStrategy, JwtRefreshTokenStrategy],\n  exports: [\n    AuthService,\n    JwtAccessTokenStrategy,\n    JwtRefreshTokenStrategy,\n    PassportModule,\n  ],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAccessToken\n                            \n                            \n                                getCookiesForLogOut\n                            \n                            \n                                    Private\n                                    Async\n                                getRefreshToken\n                            \n                            \n                                    Async\n                                getUserIfRefreshTokenMatches\n                            \n                            \n                                    Async\n                                isAdminUser\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                removeRefreshToken\n                            \n                            \n                                    Async\n                                renewAccessToken\n                            \n                            \n                                    Private\n                                    Static\n                                setCookies\n                            \n                            \n                                    Private\n                                    Async\n                                setCurrentRefreshToken\n                            \n                            \n                                    Async\n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in server/auth/auth.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAccessToken\n                        \n                        \n                    \n                \n            \n            \n                \ngetAccessToken(payload: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in server/auth/auth.service.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCookiesForLogOut\n                        \n                        \n                    \n                \n            \n            \n                \ngetCookiesForLogOut()\n                \n            \n\n\n            \n                \n                    Defined in server/auth/auth.service.ts:156\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     string[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            getRefreshToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRefreshToken(payload: JwtPayload, id: number)\n                \n            \n\n\n            \n                \n                    Defined in server/auth/auth.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getUserIfRefreshTokenMatches\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserIfRefreshTokenMatches(refreshToken: string, username: string)\n                \n            \n\n\n            \n                \n                    Defined in server/auth/auth.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            isAdminUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isAdminUser()\n                \n            \n\n\n            \n                \n                    Defined in server/auth/auth.service.ts:173\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(request: Request, response: Response)\n                \n            \n\n\n            \n                \n                    Defined in server/auth/auth.service.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            removeRefreshToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeRefreshToken(username: string)\n                \n            \n\n\n            \n                \n                    Defined in server/auth/auth.service.ts:163\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            renewAccessToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    renewAccessToken(request: Request, response: Response)\n                \n            \n\n\n            \n                \n                    Defined in server/auth/auth.service.ts:146\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            setCookies\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setCookies(accessToken: string, refreshToken?: string)\n                \n            \n\n\n            \n                \n                    Defined in server/auth/auth.service.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            setCurrentRefreshToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setCurrentRefreshToken(refreshToken: string, id: number)\n                \n            \n\n\n            \n                \n                    Defined in server/auth/auth.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(signUpDto: SignUpDto)\n                \n            \n\n\n            \n                \n                    Defined in server/auth/auth.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signUpDto\n                                    \n                                                SignUpDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  HttpException,\n  HttpStatus,\n  Injectable,\n  NotFoundException,\n  Req,\n  Res,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from '../common/entities/user.entity';\nimport { Repository } from 'typeorm';\nimport * as bcrypt from 'bcrypt';\nimport { JwtService } from '@nestjs/jwt';\nimport { JwtPayload } from '../common/interfaces';\nimport { SignUpDto } from '../common/dtos/sign-up.dto';\nimport { Request, Response } from 'express';\nimport cookie from 'cookie';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectRepository(User) private userRepository: Repository,\n    private jwtService: JwtService,\n  ) {}\n\n  async signUp(signUpDto: SignUpDto): Promise {\n    const { username, password } = signUpDto;\n    const user = await this.userRepository.findOne({ username });\n    if (user) {\n      throw new ConflictException('Username already exists');\n    }\n    const userEntity = new User();\n    try {\n      userEntity.username = username;\n      userEntity.password = await bcrypt.hash(password, 10);\n      userEntity.currentHashedRefreshToken = '';\n      await this.userRepository.save(userEntity);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async getUserIfRefreshTokenMatches(refreshToken: string, username: string) {\n    const user = await this.userRepository.findOne({ username });\n    if (user && user.currentHashedRefreshToken) {\n      const isRefreshTokenMatching = await bcrypt.compare(\n        refreshToken,\n        user.currentHashedRefreshToken,\n      );\n      return isRefreshTokenMatching && user;\n    } else if (!user) {\n      throw new HttpException(\n        `${username} does not exist`,\n        HttpStatus.NOT_FOUND,\n      );\n    }\n  }\n\n  private async setCurrentRefreshToken(refreshToken: string, id: number) {\n    const currentHashedRefreshToken = await bcrypt.hash(refreshToken, 10);\n    await this.userRepository.update(id, {\n      currentHashedRefreshToken,\n    });\n  }\n\n  private async getRefreshToken(\n    payload: JwtPayload,\n    id: number,\n  ): Promise {\n    const refreshToken = this.jwtService.sign(payload, {\n      secret: `${process.env.JWT_REFRESH_SECRET_OR_KEY}`,\n      expiresIn: 86400,\n    });\n    await this.setCurrentRefreshToken(refreshToken, id);\n    return refreshToken;\n  }\n\n  getAccessToken(payload: JwtPayload): string {\n    return this.jwtService.sign(payload, {\n      secret: `${process.env.JWT_SECRET_OR_KEY}`,\n      expiresIn: 900,\n    });\n  }\n\n  private static setCookies(\n    accessToken: string,\n    refreshToken?: string,\n  ): string[] {\n    const cookies = [];\n    const accessTokenCookie = cookie.serialize(\n      'FCM-ACCESS-TOKEN',\n      accessToken,\n      {\n        httpOnly: true,\n        secure: process.env.DEVELOPMENT !== 'development',\n        sameSite: 'strict',\n        maxAge: 900,\n        path: '/',\n      },\n    );\n    cookies.push(accessTokenCookie);\n    if (refreshToken) {\n      const refreshTokenCookie = cookie.serialize(\n        'FCM-REFRESH-TOKEN',\n        refreshToken,\n        {\n          httpOnly: true,\n          secure: process.env.DEVELOPMENT !== 'development',\n          sameSite: 'strict',\n          maxAge: 86400,\n          path: '/',\n        },\n      );\n      cookies.push(refreshTokenCookie);\n    }\n    return cookies;\n  }\n\n  async login(\n    @Req() request: Request,\n    @Res() response: Response,\n  ): Promise {\n    const { username, password } = request.body;\n    const user = await this.userRepository.findOne({ username });\n    if (user && (await bcrypt.compare(password, user.password))) {\n      const payload: JwtPayload = { username };\n      const accessToken = this.getAccessToken(payload);\n      const refreshToken = await this.getRefreshToken(payload, user.id);\n      response.setHeader(\n        'Set-Cookie',\n        AuthService.setCookies(accessToken, refreshToken),\n      );\n      return response.sendStatus(HttpStatus.OK);\n    } else if (!user) {\n      throw new HttpException(\n        `${username} does not exist`,\n        HttpStatus.NOT_FOUND,\n      );\n    } else {\n      throw new UnauthorizedException('Invalid credentials');\n    }\n  }\n\n  async renewAccessToken(\n    @Req() request: Request,\n    @Res() response: Response,\n  ): Promise {\n    const { username } = request.body;\n    const accessToken = this.getAccessToken({ username });\n    response.setHeader('Set-Cookie', AuthService.setCookies(accessToken));\n    return response.sendStatus(HttpStatus.OK);\n  }\n\n  getCookiesForLogOut(): string[] {\n    return [\n      'FCM-ACCESS-TOKEN=; HttpOnly; Path=/; Max-Age=0',\n      'FCM-REFRESH-TOKEN=; HttpOnly; Path=/; Max-Age=0',\n    ];\n  }\n\n  async removeRefreshToken(username: string) {\n    const user = await this.userRepository.findOne({ username });\n    if (!user) {\n      throw new NotFoundException(`${username} was not found`);\n    }\n    return this.userRepository.update(user.id, {\n      currentHashedRefreshToken: '',\n    });\n  }\n\n  async isAdminUser(): Promise {\n    const user = await this.userRepository\n      .createQueryBuilder('user')\n      .limit(1)\n      .getOne();\n    return !!user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/BasicAuthGuard.html":{"url":"guards/BasicAuthGuard.html","title":"guard - BasicAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    BasicAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                server/auth/guards/basic-auth.strategy.ts\n            \n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                    Static\n                                validateRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in server/auth/guards/basic-auth.strategy.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            validateRequest\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateRequest(request: Request)\n                \n            \n\n\n            \n                \n                    Defined in server/auth/guards/basic-auth.strategy.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { Request } from 'express';\n\n@Injectable()\nexport class BasicAuthGuard implements CanActivate {\n  static validateRequest(request: Request): boolean {\n    const authorization = Buffer.from(\n      request.headers['basic-authorization'] as string,\n      'base64',\n    ).toString('ascii');\n    const [username, password] = authorization.split(':');\n    return (\n      username === process.env.BASIC_AUTH_USERNAME &&\n      password === process.env.BASIC_AUTH_PASSWORD\n    );\n  }\n\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const request = context.switchToHttp().getRequest();\n    return BasicAuthGuard.validateRequest(request);\n  }\n}\n\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FcmAdminServerModule.html":{"url":"modules/FcmAdminServerModule.html","title":"module - FcmAdminServerModule","body":"\n                   \n\n\n\n\n    Modules\n    FcmAdminServerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FcmAdminServerModule\n\n\n\ncluster_FcmAdminServerModule_providers\n\n\n\ncluster_FcmAdminServerModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nFcmAdminServerModule\n\nFcmAdminServerModule\n\nFcmAdminServerModule -->\n\nAuthModule->FcmAdminServerModule\n\n\n\n\n\nFcmService\n\nFcmService\n\nFcmAdminServerModule -->\n\nFcmService->FcmAdminServerModule\n\n\n\n\n\nNotificationsService\n\nNotificationsService\n\nFcmAdminServerModule -->\n\nNotificationsService->FcmAdminServerModule\n\n\n\n\n\nSubscribersService\n\nSubscribersService\n\nFcmAdminServerModule -->\n\nSubscribersService->FcmAdminServerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            server/fcm-admin-server/fcm-admin-server.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FcmService\n                        \n                        \n                            NotificationsService\n                        \n                        \n                            SubscribersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            NotificationsController\n                        \n                        \n                            FcmController\n                        \n                        \n                            SubscribersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Notification } from '../common/entities/notification.entity';\nimport { NotificationsController } from './controllers/notifications.controller';\nimport { FcmController } from './controllers/fcm.controller';\nimport { SubscribersController } from './controllers/subscribersController';\nimport { SubscribersService } from './services/subscribers.service';\nimport { FcmService } from './services/fcm.service';\nimport { NotificationsService } from './services/notifications.service';\nimport { Subscriber } from '../common/entities/subscriber.entity';\nimport { AuthModule } from '../auth/auth.module';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Notification, Subscriber]), AuthModule],\n  controllers: [NotificationsController, FcmController, SubscribersController],\n  providers: [SubscribersService, FcmService, NotificationsService],\n})\nexport class FcmAdminServerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FcmController.html":{"url":"controllers/FcmController.html","title":"controller - FcmController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FcmController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/fcm-admin-server/controllers/fcm.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                fcm\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                adminSubscriptionToTopic\n                            \n                            \n                                    Async\n                                clientSubscriptionToTopic\n                            \n                            \n                                    Async\n                                sendMulticastPushNotification\n                            \n                            \n                                    Async\n                                sendPushNotificationToDevice\n                            \n                            \n                                    Async\n                                sendPushNotificationToTopic\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            adminSubscriptionToTopic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    adminSubscriptionToTopic(subscriptionRequestDto: SubscriptionRequestDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAccessTokenGuard)@Post('/admin-toggle-subscription')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in server/fcm-admin-server/controllers/fcm.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    subscriptionRequestDto\n                                    \n                                                SubscriptionRequestDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            clientSubscriptionToTopic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clientSubscriptionToTopic(subscriptionRequestDto: SubscriptionRequestDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(BasicAuthGuard)@Post('/subscribe')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in server/fcm-admin-server/controllers/fcm.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    subscriptionRequestDto\n                                    \n                                                SubscriptionRequestDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            sendMulticastPushNotification\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendMulticastPushNotification(multicastRequestDto: MulticastRequestDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAccessTokenGuard)@Post('/multicast')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in server/fcm-admin-server/controllers/fcm.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    multicastRequestDto\n                                    \n                                                MulticastRequestDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            sendPushNotificationToDevice\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendPushNotificationToDevice(notificationRequestDto: SingleRequestDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAccessTokenGuard)@Post('/token')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in server/fcm-admin-server/controllers/fcm.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    notificationRequestDto\n                                    \n                                                SingleRequestDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            sendPushNotificationToTopic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendPushNotificationToTopic(topicRequestDto: TopicRequestDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAccessTokenGuard)@Post('/topic')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in server/fcm-admin-server/controllers/fcm.controller.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicRequestDto\n                                    \n                                                TopicRequestDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, HttpCode, Post, UseGuards } from '@nestjs/common';\nimport { SubscriptionRequestDto } from '../../common/dtos/subscription-request.dto';\nimport { SingleRequestDto } from '../../common/dtos/single-request.dto';\nimport { FcmService } from '../services/fcm.service';\nimport { MulticastRequestDto } from '../../common/dtos/multicast-request.dto';\nimport JwtAccessTokenGuard from '../../auth/guards/jwt-access-token.guard';\nimport { BasicAuthGuard } from '../../auth/guards/basic-auth.strategy';\nimport { TopicRequestDto } from '../../common/dtos/topic-request.dto';\n\n@Controller('fcm')\nexport class FcmController {\n  constructor(private readonly fcmService: FcmService) {}\n\n  @UseGuards(BasicAuthGuard)\n  @Post('/subscribe')\n  @HttpCode(200)\n  async clientSubscriptionToTopic(\n    @Body() subscriptionRequestDto: SubscriptionRequestDto,\n  ): Promise {\n    return await this.fcmService.clientSubscriptionToTopic(\n      subscriptionRequestDto,\n    );\n  }\n\n  @UseGuards(JwtAccessTokenGuard)\n  @Post('/admin-toggle-subscription')\n  @HttpCode(200)\n  async adminSubscriptionToTopic(\n    @Body() subscriptionRequestDto: SubscriptionRequestDto,\n  ): Promise {\n    return await this.fcmService.adminToggleSubscriptionToTopic(\n      subscriptionRequestDto,\n    );\n  }\n\n  @UseGuards(JwtAccessTokenGuard)\n  @Post('/token')\n  @HttpCode(200)\n  async sendPushNotificationToDevice(\n    @Body() notificationRequestDto: SingleRequestDto,\n  ): Promise {\n    return await this.fcmService.sendPushNotificationToDevice(\n      notificationRequestDto,\n    );\n  }\n\n  @UseGuards(JwtAccessTokenGuard)\n  @Post('/multicast')\n  @HttpCode(200)\n  async sendMulticastPushNotification(\n    @Body() multicastRequestDto: MulticastRequestDto,\n  ): Promise {\n    return await this.fcmService.sendMulticastPushNotification(\n      multicastRequestDto,\n    );\n  }\n\n  @UseGuards(JwtAccessTokenGuard)\n  @Post('/topic')\n  @HttpCode(200)\n  async sendPushNotificationToTopic(\n    @Body() topicRequestDto: TopicRequestDto,\n  ): Promise {\n    return await this.fcmService.sendPushNotificationToTopic(topicRequestDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FcmService.html":{"url":"injectables/FcmService.html","title":"injectable - FcmService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FcmService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/fcm-admin-server/services/fcm.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                adminToggleSubscriptionToTopic\n                            \n                            \n                                    Async\n                                clientSubscriptionToTopic\n                            \n                            \n                                    Private\n                                    Static\n                                initFirebase\n                            \n                            \n                                    Private\n                                    Async\n                                saveMulticastNotifications\n                            \n                            \n                                    Async\n                                sendMulticastPushNotification\n                            \n                            \n                                    Async\n                                sendPushNotificationToDevice\n                            \n                            \n                                    Async\n                                sendPushNotificationToTopic\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(notificationsService: NotificationsService, subscribersService: SubscribersService, connection: Connection)\n                    \n                \n                        \n                            \n                                Defined in server/fcm-admin-server/services/fcm.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        notificationsService\n                                                  \n                                                        \n                                                                        NotificationsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        subscribersService\n                                                  \n                                                        \n                                                                        SubscribersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        connection\n                                                  \n                                                        \n                                                                    Connection\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            adminToggleSubscriptionToTopic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    adminToggleSubscriptionToTopic(subscriptionRequestDto: SubscriptionRequestDto)\n                \n            \n\n\n            \n                \n                    Defined in server/fcm-admin-server/services/fcm.service.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    subscriptionRequestDto\n                                    \n                                                SubscriptionRequestDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            clientSubscriptionToTopic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clientSubscriptionToTopic(subscriptionRequestDto: SubscriptionRequestDto)\n                \n            \n\n\n            \n                \n                    Defined in server/fcm-admin-server/services/fcm.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    subscriptionRequestDto\n                                    \n                                                SubscriptionRequestDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            initFirebase\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initFirebase()\n                \n            \n\n\n            \n                \n                    Defined in server/fcm-admin-server/services/fcm.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            saveMulticastNotifications\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveMulticastNotifications(subscribers: SingleRequestDto[], success: boolean)\n                \n            \n\n\n            \n                \n                    Defined in server/fcm-admin-server/services/fcm.service.ts:246\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    subscribers\n                                    \n                                                SingleRequestDto[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    success\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            sendMulticastPushNotification\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendMulticastPushNotification(multicastNotificationRequestDto: MulticastRequestDto)\n                \n            \n\n\n            \n                \n                    Defined in server/fcm-admin-server/services/fcm.service.ts:159\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    multicastNotificationRequestDto\n                                    \n                                                MulticastRequestDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            sendPushNotificationToDevice\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendPushNotificationToDevice(notificationPayloadDto: SingleRequestDto)\n                \n            \n\n\n            \n                \n                    Defined in server/fcm-admin-server/services/fcm.service.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    notificationPayloadDto\n                                    \n                                                SingleRequestDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            sendPushNotificationToTopic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendPushNotificationToTopic(topicRequestDto: TopicRequestDto)\n                \n            \n\n\n            \n                \n                    Defined in server/fcm-admin-server/services/fcm.service.ts:196\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicRequestDto\n                                    \n                                                TopicRequestDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  InternalServerErrorException,\n  NotFoundException,\n} from '@nestjs/common';\nimport { SubscriptionRequestDto } from '../../common/dtos/subscription-request.dto';\nimport admin, { ServiceAccount } from 'firebase-admin';\nimport { SingleRequestDto } from '../../common/dtos/single-request.dto';\nimport serviceAccount from '../../common/config/serviceAccountKey.json';\nimport { NotificationsService } from './notifications.service';\nimport { SubscribersService } from './subscribers.service';\nimport { NotificationStatus } from '../../common/enums';\nimport { MulticastRequestDto } from '../../common/dtos/multicast-request.dto';\nimport Message = admin.messaging.Message;\nimport MulticastMessage = admin.messaging.MulticastMessage;\nimport { Connection } from 'typeorm';\nimport { TopicRequestDto } from '../../common/dtos/topic-request.dto';\n\n@Injectable()\nexport class FcmService {\n  constructor(\n    private readonly notificationsService: NotificationsService,\n    private readonly subscribersService: SubscribersService,\n    private connection: Connection,\n  ) {\n    FcmService.initFirebase();\n  }\n\n  private static initFirebase(): void {\n    admin.initializeApp({\n      credential: admin.credential.cert(serviceAccount as ServiceAccount),\n      databaseURL: 'https://fir-cloud-messaging-admin.firebaseio.com',\n    });\n  }\n\n  async clientSubscriptionToTopic(\n    subscriptionRequestDto: SubscriptionRequestDto,\n  ): Promise {\n    const { username, token, topic } = subscriptionRequestDto;\n    const subscriber = await this.subscribersService.findByUsername(\n      `${topic}-${username}`,\n    );\n    if (subscriber) {\n      return `${username} is already subscribed`;\n    }\n    const queryRunner = this.connection.createQueryRunner();\n    await queryRunner.connect();\n    await queryRunner.startTransaction();\n    try {\n      await admin.messaging().subscribeToTopic(token, topic);\n      await this.subscribersService.save(username, token, topic, true);\n      await queryRunner.commitTransaction();\n      return `${username} was successfully subscribed to topic: ${topic}`;\n    } catch (error) {\n      await queryRunner.rollbackTransaction();\n      throw new InternalServerErrorException(\n        `Error subscribing ${username} to topic: ${topic}`,\n      );\n    } finally {\n      await queryRunner.release();\n    }\n  }\n\n  async adminToggleSubscriptionToTopic(\n    subscriptionRequestDto: SubscriptionRequestDto,\n  ): Promise {\n    const { username, token, topic, subscribed } = subscriptionRequestDto;\n    const subscriber = await this.subscribersService.findByUsername(username);\n    if (!subscriber) {\n      throw new NotFoundException(`${username} was not found`);\n    }\n    if (subscribed === undefined || subscribed === null) {\n      throw new BadRequestException('Subscribed value is not defined');\n    }\n    const queryRunner = this.connection.createQueryRunner();\n    await queryRunner.connect();\n    await queryRunner.startTransaction();\n    try {\n      subscribed\n        ? await admin.messaging().subscribeToTopic(token, topic)\n        : await admin.messaging().unsubscribeFromTopic(token, topic);\n      subscriber.subscribed = subscribed;\n      await this.subscribersService.update(username, subscriber);\n      await queryRunner.commitTransaction();\n      return `${username} was successfully ${\n        subscribed ? 'subscribed' : 'unsubscribed'\n      }`;\n    } catch (error) {\n      await queryRunner.rollbackTransaction();\n      throw new InternalServerErrorException(\n        `Error subscribing to topic: ${topic}`,\n      );\n    } finally {\n      await queryRunner.release();\n    }\n  }\n\n  async sendPushNotificationToDevice(\n    notificationPayloadDto: SingleRequestDto,\n  ): Promise {\n    if (notificationPayloadDto.token === '') {\n      throw new BadRequestException('Token can not be empty');\n    }\n    const queryRunner = this.connection.createQueryRunner();\n    await queryRunner.connect();\n    await queryRunner.startTransaction();\n    const {\n      title,\n      body,\n      token,\n      topic,\n      username,\n      type,\n    } = notificationPayloadDto;\n    try {\n      const message: Message = {\n        data: { title, body },\n        token,\n      };\n      await admin.messaging().send(message);\n      await this.notificationsService.save(\n        title,\n        body,\n        topic,\n        username,\n        type,\n        NotificationStatus.COMPLETED,\n      );\n      await queryRunner.commitTransaction();\n      return `Push notification was sent to ${username}`;\n    } catch (error) {\n      await queryRunner.rollbackTransaction();\n      try {\n        await this.notificationsService.save(\n          title,\n          body,\n          topic,\n          username,\n          type,\n          NotificationStatus.FAILED,\n        );\n        await queryRunner.commitTransaction();\n      } catch (error) {\n        await queryRunner.rollbackTransaction();\n      } finally {\n        await queryRunner.release();\n      }\n      console.log(\n        `Error sending push notification to username: ${username}`,\n        error,\n      );\n      throw new InternalServerErrorException(\n        `Error sending push notification to username: ${username}`,\n      );\n    }\n  }\n\n  async sendMulticastPushNotification(\n    multicastNotificationRequestDto: MulticastRequestDto,\n  ): Promise {\n    const { subscribers, tokens } = multicastNotificationRequestDto;\n    const queryRunner = this.connection.createQueryRunner();\n    await queryRunner.connect();\n    await queryRunner.startTransaction();\n    try {\n      const message: MulticastMessage = {\n        data: { title: subscribers[0].title, body: subscribers[0].body },\n        tokens,\n      };\n      await admin.messaging().sendMulticast(message);\n      await this.saveMulticastNotifications(subscribers, true);\n      await queryRunner.commitTransaction();\n      return `Multicast push notification was sent`;\n    } catch (error) {\n      await queryRunner.rollbackTransaction();\n      try {\n        await this.saveMulticastNotifications(subscribers, false);\n        console.log('Error sending multicast push notification', error);\n        await queryRunner.commitTransaction();\n        throw new InternalServerErrorException(\n          `Error sending push notification`,\n        );\n      } catch (error) {\n        await queryRunner.rollbackTransaction();\n        console.log(`Error sending push notification to username`, error);\n        throw new InternalServerErrorException(\n          `Error sending push notification`,\n        );\n      } finally {\n        await queryRunner.release();\n      }\n    }\n  }\n\n  async sendPushNotificationToTopic(\n    topicRequestDto: TopicRequestDto,\n  ): Promise {\n    const { title, body, type, topic, username } = topicRequestDto;\n    const queryRunner = this.connection.createQueryRunner();\n    await queryRunner.connect();\n    await queryRunner.startTransaction();\n    try {\n      const message: Message = {\n        data: {\n          title,\n          body,\n        },\n        topic,\n      };\n      await admin.messaging().send(message);\n      await this.notificationsService.save(\n        title,\n        body,\n        topic,\n        username,\n        type,\n        NotificationStatus.COMPLETED,\n      );\n      await queryRunner.commitTransaction();\n      return `Push notification was sent to topic: ${topic}`;\n    } catch (error) {\n      await queryRunner.rollbackTransaction();\n      try {\n        await this.notificationsService.save(\n          title,\n          body,\n          topic,\n          username,\n          type,\n          NotificationStatus.FAILED,\n        );\n        await queryRunner.commitTransaction();\n        return `Error sending push notification to topic: ${topic}`;\n      } catch (error) {\n        await queryRunner.rollbackTransaction();\n        throw new InternalServerErrorException(\n          `Error sending push notification to topic: ${topic}`,\n        );\n      } finally {\n        await queryRunner.release();\n      }\n    }\n  }\n\n  private async saveMulticastNotifications(\n    subscribers: SingleRequestDto[],\n    success: boolean,\n  ) {\n    await subscribers.forEach(subscriber => {\n      const { title, body, topic, username, type } = subscriber;\n      this.notificationsService.save(\n        title,\n        body,\n        topic,\n        username,\n        type,\n        success ? NotificationStatus.COMPLETED : NotificationStatus.FAILED,\n      );\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAccessTokenGuard.html":{"url":"injectables/JwtAccessTokenGuard.html","title":"injectable - JwtAccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtAccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/auth/guards/jwt-access-token.guard.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport default class JwtAccessTokenGuard extends AuthGuard(\n  'jwt-access-token',\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAccessTokenStrategy.html":{"url":"injectables/JwtAccessTokenStrategy.html","title":"injectable - JwtAccessTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtAccessTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/auth/guards/jwt-access-token.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in server/auth/guards/jwt-access-token.strategy.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in server/auth/guards/jwt-access-token.strategy.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { Strategy, ExtractJwt } from 'passport-jwt';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { JwtPayload } from '../../common/interfaces';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from '../../common/entities/user.entity';\nimport { Repository } from 'typeorm';\nimport { Request } from 'express';\n\n@Injectable()\nexport class JwtAccessTokenStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-access-token',\n) {\n  constructor(\n    @InjectRepository(User) private userRepository: Repository,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (request: Request) =>\n          request && request.cookies && request.cookies['FCM-ACCESS-TOKEN'],\n      ]),\n      ignoreExpiration: false,\n      secretOrKey: `${process.env.JWT_SECRET_OR_KEY}`,\n    });\n  }\n\n  async validate(payload: JwtPayload): Promise {\n    const { username } = payload;\n    const user = await this.userRepository.findOne({ username });\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/common/interfaces.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        username\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload {\n  username: string;\n}\n\nexport interface MessagePayload {\n  title: string;\n  body: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshTokenGuard.html":{"url":"injectables/JwtRefreshTokenGuard.html","title":"injectable - JwtRefreshTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/auth/guards/jwt-refresh-token.guard.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport default class JwtRefreshTokenGuard extends AuthGuard(\n  'jwt-refresh-token',\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshTokenStrategy.html":{"url":"injectables/JwtRefreshTokenStrategy.html","title":"injectable - JwtRefreshTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/auth/guards/jwt-refresh-token.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in server/auth/guards/jwt-refresh-token.strategy.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(request: Request, payload: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in server/auth/guards/jwt-refresh-token.strategy.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { Strategy, ExtractJwt } from 'passport-jwt';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { JwtPayload } from '../../common/interfaces';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from '../../common/entities/user.entity';\nimport { Repository } from 'typeorm';\nimport { AuthService } from '../auth.service';\nimport { Request } from 'express';\n\n@Injectable()\nexport class JwtRefreshTokenStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh-token',\n) {\n  constructor(\n    @InjectRepository(User) private userRepository: Repository,\n    private authService: AuthService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (request: Request) =>\n          request && request.cookies && request.cookies['FCM-REFRESH-TOKEN'],\n      ]),\n      ignoreExpiration: false,\n      secretOrKey: `${process.env.JWT_REFRESH_SECRET_OR_KEY}`,\n      passReqToCallback: true,\n    });\n  }\n\n  async validate(request: Request, payload: JwtPayload): Promise {\n    const { username } = payload;\n    const refreshToken =\n      request && request.cookies && request.cookies['FCM-REFRESH-TOKEN'];\n    console.log(username);\n    console.log(refreshToken);\n    const user = await this.authService.getUserIfRefreshTokenMatches(\n      refreshToken,\n      username,\n    );\n    console.log(user);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MatchConstraint.html":{"url":"classes/MatchConstraint.html","title":"class - MatchConstraint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MatchConstraint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/common/validators/match.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \nvalidate(value: any, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in server/common/validators/match.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  registerDecorator,\n  ValidationArguments,\n  ValidationOptions,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n} from 'class-validator';\n\nexport const Match = (\n  property: string,\n  validationOptions?: ValidationOptions,\n) => {\n  return (object: any, propertyName: string) => {\n    registerDecorator({\n      target: object.constructor,\n      propertyName,\n      options: validationOptions,\n      constraints: [property],\n      validator: MatchConstraint,\n    });\n  };\n};\n\n@ValidatorConstraint({ name: 'Match' })\nexport class MatchConstraint implements ValidatorConstraintInterface {\n  validate(value: any, args: ValidationArguments) {\n    const [relatedPropertyName] = args.constraints;\n    const relatedValue = (args.object as any)[relatedPropertyName];\n    return value === relatedValue;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MessagePayload.html":{"url":"interfaces/MessagePayload.html","title":"interface - MessagePayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MessagePayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/common/interfaces.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        body\n                                \n                                \n                                        title\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                    \n                                \n                                \n                                    \n                                        body:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload {\n  username: string;\n}\n\nexport interface MessagePayload {\n  title: string;\n  body: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MulticastRequestDto.html":{"url":"classes/MulticastRequestDto.html","title":"class - MulticastRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MulticastRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/common/dtos/multicast-request.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                subscribers\n                            \n                            \n                                tokens\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            subscribers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SingleRequestDto[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsArray()@ArrayMinSize(1)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in server/common/dtos/multicast-request.dto.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tokens\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsArray()@ArrayMinSize(1)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in server/common/dtos/multicast-request.dto.ts:11\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ArrayMinSize, IsArray } from 'class-validator';\nimport { SingleRequestDto } from './single-request.dto';\n\nexport class MulticastRequestDto {\n  @IsArray()\n  @ArrayMinSize(1)\n  subscribers: SingleRequestDto[];\n\n  @IsArray()\n  @ArrayMinSize(1)\n  tokens: string[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/NextClientController.html":{"url":"controllers/NextClientController.html","title":"controller - NextClientController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  NextClientController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/next-client.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                showListNotificationsPage\n                            \n                            \n                                    Async\n                                showListSubscribersPage\n                            \n                            \n                                    Async\n                                showLoginPage\n                            \n                            \n                                    Async\n                                showNotificationsPage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            showListNotificationsPage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    showListNotificationsPage(req: IncomingMessage, res: ServerResponse)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAccessTokenGuard)@Get('/list-notifications')\n                \n            \n\n            \n                \n                    Defined in server/next-client.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            IncomingMessage\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            ServerResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            showListSubscribersPage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    showListSubscribersPage(req: IncomingMessage, res: ServerResponse)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAccessTokenGuard)@Get('/list-subscribers')\n                \n            \n\n            \n                \n                    Defined in server/next-client.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            IncomingMessage\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            ServerResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            showLoginPage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    showLoginPage(req: IncomingMessage, res: ServerResponse)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in server/next-client.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            IncomingMessage\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            ServerResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            showNotificationsPage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    showNotificationsPage(req: IncomingMessage, res: ServerResponse)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAccessTokenGuard)@Get('/compose-notification')\n                \n            \n\n            \n                \n                    Defined in server/next-client.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            IncomingMessage\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            ServerResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Req, Res, UseGuards } from '@nestjs/common';\nimport { NextService } from '@nestpress/next';\nimport { IncomingMessage, ServerResponse } from 'http';\nimport { AuthService } from './auth/auth.service';\nimport JwtAccessTokenGuard from './auth/guards/jwt-access-token.guard';\n\n@Controller()\nexport class NextClientController {\n  constructor(\n    private readonly authService: AuthService,\n    private readonly next: NextService,\n  ) {}\n\n  @Get()\n  async showLoginPage(@Req() req: IncomingMessage, @Res() res: ServerResponse) {\n    const url = (await this.authService.isAdminUser()) ? 'sign-in' : 'sign-up';\n    await this.next.render(`/${url}`, req, res);\n  }\n\n  @UseGuards(JwtAccessTokenGuard)\n  @Get('/list-notifications')\n  async showListNotificationsPage(\n    @Req() req: IncomingMessage,\n    @Res() res: ServerResponse,\n  ): Promise {\n    await this.next.render('/list-notifications', req, res);\n  }\n\n  @UseGuards(JwtAccessTokenGuard)\n  @Get('/list-subscribers')\n  async showListSubscribersPage(\n    @Req() req: IncomingMessage,\n    @Res() res: ServerResponse,\n  ): Promise {\n    await this.next.render('/list-subscribers', req, res);\n  }\n\n  @UseGuards(JwtAccessTokenGuard)\n  @Get('/compose-notification')\n  async showNotificationsPage(\n    @Req() req: IncomingMessage,\n    @Res() res: ServerResponse,\n  ): Promise {\n    await this.next.render('/compose-notification', req, res);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Notification.html":{"url":"classes/Notification.html","title":"class - Notification","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Notification\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/common/entities/notification.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                body\n                            \n                            \n                                createdOn\n                            \n                            \n                                id\n                            \n                            \n                                status\n                            \n                            \n                                title\n                            \n                            \n                                topic\n                            \n                            \n                                type\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            body\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in server/common/entities/notification.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdOn\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in server/common/entities/notification.entity.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in server/common/entities/notification.entity.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         NotificationStatus\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in server/common/entities/notification.entity.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in server/common/entities/notification.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            topic\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in server/common/entities/notification.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         NotificationType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in server/common/entities/notification.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in server/common/entities/notification.entity.ts:22\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\nimport { NotificationStatus, NotificationType } from '../enums';\n\n@Entity('notification')\nexport class Notification {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  title: string;\n\n  @Column()\n  body: string;\n\n  @Column()\n  type: NotificationType;\n\n  @Column()\n  topic: string;\n\n  @Column()\n  username: string;\n\n  @Column()\n  createdOn: string;\n\n  @Column()\n  status: NotificationStatus;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotificationResponseDto.html":{"url":"classes/NotificationResponseDto.html","title":"class - NotificationResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotificationResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/common/dtos/notification-response.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                body\n                            \n                            \n                                createdOn\n                            \n                            \n                                id\n                            \n                            \n                                status\n                            \n                            \n                                title\n                            \n                            \n                                topic\n                            \n                            \n                                type\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            body\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in server/common/dtos/notification-response.dto.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdOn\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in server/common/dtos/notification-response.dto.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in server/common/dtos/notification-response.dto.ts:4\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         NotificationStatus\n\n                        \n                    \n                        \n                            \n                                    Defined in server/common/dtos/notification-response.dto.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in server/common/dtos/notification-response.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            topic\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in server/common/dtos/notification-response.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         NotificationType\n\n                        \n                    \n                        \n                            \n                                    Defined in server/common/dtos/notification-response.dto.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in server/common/dtos/notification-response.dto.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotificationStatus, NotificationType } from '../enums';\n\nexport class NotificationResponseDto {\n  id: number;\n  title: string;\n  body: string;\n  type: NotificationType;\n  topic: string;\n  username: string;\n  createdOn: string;\n  status: NotificationStatus;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/NotificationsController.html":{"url":"controllers/NotificationsController.html","title":"controller - NotificationsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  NotificationsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/fcm-admin-server/controllers/notifications.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                fcm-notifications\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteById\n                            \n                            \n                                    Async\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteById(ids: number[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/delete')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in server/fcm-admin-server/controllers/notifications.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ids\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')\n                \n            \n\n            \n                \n                    Defined in server/fcm-admin-server/controllers/notifications.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  HttpCode,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { NotificationResponseDto } from '../../common/dtos/notification-response.dto';\nimport { NotificationsService } from '../services/notifications.service';\nimport JwtAccessTokenGuard from '../../auth/guards/jwt-access-token.guard';\n\n@Controller('fcm-notifications')\n@UseGuards(JwtAccessTokenGuard)\nexport class NotificationsController {\n  constructor(private readonly notificationsService: NotificationsService) {}\n\n  @Get('/')\n  async findAll(): Promise {\n    return await this.notificationsService.findAll();\n  }\n\n  @Post('/delete')\n  @HttpCode(200)\n  async deleteById(@Body() ids: number[]): Promise {\n    await this.notificationsService.deleteById(ids);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NotificationsService.html":{"url":"injectables/NotificationsService.html","title":"injectable - NotificationsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  NotificationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/fcm-admin-server/services/notifications.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteById\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(notificationRepository: Repository, connection: Connection)\n                    \n                \n                        \n                            \n                                Defined in server/fcm-admin-server/services/notifications.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        notificationRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        connection\n                                                  \n                                                        \n                                                                    Connection\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteById(ids: number[])\n                \n            \n\n\n            \n                \n                    Defined in server/fcm-admin-server/services/notifications.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ids\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in server/fcm-admin-server/services/notifications.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in server/fcm-admin-server/services/notifications.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            save\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    save(title: string, body: string, topic: string, username: string, type: NotificationType, status: NotificationStatus)\n                \n            \n\n\n            \n                \n                    Defined in server/fcm-admin-server/services/notifications.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    title\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    topic\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    type\n                                    \n                                                NotificationType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    status\n                                    \n                                                NotificationStatus\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ConflictException,\n  Injectable,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Notification } from '../../common/entities/notification.entity';\nimport { Connection, Repository } from 'typeorm';\nimport { NotificationResponseDto } from '../../common/dtos/notification-response.dto';\nimport { NotificationStatus, NotificationType } from '../../common/enums';\n\n@Injectable()\nexport class NotificationsService {\n  constructor(\n    @InjectRepository(Notification)\n    private notificationRepository: Repository,\n    private connection: Connection,\n  ) {}\n\n  async findAll(): Promise {\n    const notifications = await this.notificationRepository.find();\n    return notifications.map(\n      notification => notification as NotificationResponseDto,\n    );\n  }\n\n  async save(\n    title: string,\n    body: string,\n    topic: string,\n    username: string,\n    type: NotificationType,\n    status: NotificationStatus,\n  ): Promise {\n    const notification = new Notification();\n    notification.topic = topic;\n    notification.createdOn = Date.now().toLocaleString();\n    notification.title = title;\n    notification.body = body;\n    notification.type = type;\n    notification.username = username;\n    notification.status = status;\n    try {\n      await this.notificationRepository.save(notification);\n      return true;\n    } catch (error) {\n      console.log(error);\n      throw new ConflictException(error);\n    }\n  }\n\n  async findById(id: number): Promise {\n    if (!id) {\n      throw new BadRequestException('Id format is incorrect');\n    }\n    try {\n      const notification = await this.notificationRepository.findOne({ id });\n      if (notification) {\n        return notification as NotificationResponseDto;\n      }\n    } catch (error) {\n      throw new ConflictException(error);\n    }\n\n    return `Notification with id: ${id} not found`;\n  }\n\n  async deleteById(ids: number[]): Promise {\n    const queryRunner = this.connection.createQueryRunner();\n    await queryRunner.connect();\n    await queryRunner.startTransaction();\n    try {\n      for (const id of ids) {\n        const notification = await this.findById(id);\n        if (notification) {\n          await queryRunner.manager.delete(Notification, id);\n        }\n      }\n      await queryRunner.commitTransaction();\n    } catch (error) {\n      await queryRunner.rollbackTransaction();\n    } finally {\n      await queryRunner.release();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInRequestDto.html":{"url":"classes/SignInRequestDto.html","title":"class - SignInRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/common/dtos/sign-in-request.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@MinLength(8)@MaxLength(20)@Matches(/(?:(?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {message: 'password too weak'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in server/common/dtos/sign-in-request.dto.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@MinLength(8)@MaxLength(20)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in server/common/dtos/sign-in-request.dto.ts:7\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, Matches, MaxLength, MinLength } from 'class-validator';\n\nexport class SignInRequestDto {\n  @IsString()\n  @MinLength(8)\n  @MaxLength(20)\n  username: string;\n\n  @IsString()\n  @MinLength(8)\n  @MaxLength(20)\n  @Matches(/(?:(?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {\n    message: 'password too weak',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignUpDto.html":{"url":"classes/SignUpDto.html","title":"class - SignUpDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignUpDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/common/dtos/sign-up.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                confirmPassword\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            confirmPassword\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@MinLength(8)@MaxLength(20)@Match('password', {message: 'passwords do not match'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in server/common/dtos/sign-up.dto.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@MinLength(8)@MaxLength(20)@Matches(/(?:(?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {message: 'password too weak'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in server/common/dtos/sign-up.dto.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@MinLength(4)@MaxLength(20)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in server/common/dtos/sign-up.dto.ts:8\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, Matches, MaxLength, MinLength } from 'class-validator';\nimport { Match } from '../validators/match';\n\nexport class SignUpDto {\n  @IsString()\n  @MinLength(4)\n  @MaxLength(20)\n  username: string;\n\n  @IsString()\n  @MinLength(8)\n  @MaxLength(20)\n  @Matches(/(?:(?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {\n    message: 'password too weak',\n  })\n  password: string;\n\n  @IsString()\n  @MinLength(8)\n  @MaxLength(20)\n  @Match('password', { message: 'passwords do not match' })\n  confirmPassword: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SingleRequestDto.html":{"url":"classes/SingleRequestDto.html","title":"class - SingleRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SingleRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/common/dtos/single-request.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                body\n                            \n                            \n                                title\n                            \n                            \n                                token\n                            \n                            \n                                topic\n                            \n                            \n                                type\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            body\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@MinLength(4)@MaxLength(250)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in server/common/dtos/single-request.dto.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@MinLength(4)@MaxLength(20)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in server/common/dtos/single-request.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            token\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in server/common/dtos/single-request.dto.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            topic\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@MinLength(4)@MaxLength(20)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in server/common/dtos/single-request.dto.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         NotificationType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEnum(NotificationType)@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in server/common/dtos/single-request.dto.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in server/common/dtos/single-request.dto.ts:25\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsString, MaxLength, MinLength } from 'class-validator';\nimport { NotificationType } from '../enums';\n\nexport class SingleRequestDto {\n  @IsString()\n  @MinLength(4)\n  @MaxLength(20)\n  title: string;\n\n  @IsString()\n  @MinLength(4)\n  @MaxLength(250)\n  body: string;\n\n  @IsEnum(NotificationType)\n  @IsString()\n  type: NotificationType;\n\n  @IsString()\n  @MinLength(4)\n  @MaxLength(20)\n  topic: string;\n\n  @IsString()\n  username: string;\n\n  @IsString()\n  token: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Subscriber.html":{"url":"classes/Subscriber.html","title":"class - Subscriber","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Subscriber\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/common/entities/subscriber.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                subscribed\n                            \n                            \n                                token\n                            \n                            \n                                topic\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in server/common/entities/subscriber.entity.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            subscribed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in server/common/entities/subscriber.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            token\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in server/common/entities/subscriber.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            topic\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in server/common/entities/subscriber.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in server/common/entities/subscriber.entity.ts:10\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn, Unique } from 'typeorm';\n\n@Entity('subscriber')\n@Unique(['username'])\nexport class Subscriber {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  username: string;\n\n  @Column()\n  token: string;\n\n  @Column()\n  topic: string;\n\n  @Column()\n  subscribed: boolean;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SubscribersController.html":{"url":"controllers/SubscribersController.html","title":"controller - SubscribersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SubscribersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/fcm-admin-server/controllers/subscribersController.ts\n        \n\n            \n                Prefix\n            \n            \n                fcm-subscribers\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllTopics\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')\n                \n            \n\n            \n                \n                    Defined in server/fcm-admin-server/controllers/subscribersController.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAllTopics\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllTopics()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/topics')\n                \n            \n\n            \n                \n                    Defined in server/fcm-admin-server/controllers/subscribersController.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, UseGuards } from '@nestjs/common';\nimport { SubscribersService } from '../services/subscribers.service';\nimport { SubscriptionResponseDto } from '../../common/dtos/subscription-response.dto';\nimport JwtAccessTokenGuard from '../../auth/guards/jwt-access-token.guard';\nimport { TopicsResponseDto } from '../../common/dtos/topics-response.dto';\n\n@Controller('fcm-subscribers')\n@UseGuards(JwtAccessTokenGuard)\nexport class SubscribersController {\n  constructor(private readonly subscribersService: SubscribersService) {}\n\n  @Get('/')\n  async findAll(): Promise {\n    return await this.subscribersService.findAll();\n  }\n\n  @Get('/topics')\n  async findAllTopics(): Promise {\n    return await this.subscribersService.findAllTopics();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SubscribersService.html":{"url":"injectables/SubscribersService.html","title":"injectable - SubscribersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  SubscribersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/fcm-admin-server/services/subscribers.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllTopics\n                            \n                            \n                                    Async\n                                findByUsername\n                            \n                            \n                                    Async\n                                save\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(subscriberRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in server/fcm-admin-server/services/subscribers.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        subscriberRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in server/fcm-admin-server/services/subscribers.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAllTopics\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllTopics()\n                \n            \n\n\n            \n                \n                    Defined in server/fcm-admin-server/services/subscribers.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findByUsername\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findByUsername(username: string)\n                \n            \n\n\n            \n                \n                    Defined in server/fcm-admin-server/services/subscribers.service.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            save\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    save(username: string, token: string, topic: string, subscribed: boolean)\n                \n            \n\n\n            \n                \n                    Defined in server/fcm-admin-server/services/subscribers.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    topic\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    subscribed\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(username: string, subscriber: Subscriber)\n                \n            \n\n\n            \n                \n                    Defined in server/fcm-admin-server/services/subscribers.service.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    subscriber\n                                    \n                                                Subscriber\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ConflictException,\n  Injectable,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Subscriber } from '../../common/entities/subscriber.entity';\nimport { Repository } from 'typeorm';\nimport { SubscriptionResponseDto } from '../../common/dtos/subscription-response.dto';\nimport { TopicsResponseDto } from '../../common/dtos/topics-response.dto';\n\n@Injectable()\nexport class SubscribersService {\n  constructor(\n    @InjectRepository(Subscriber)\n    private subscriberRepository: Repository,\n  ) {}\n\n  async findAll(): Promise {\n    const subscriptions = await this.subscriberRepository\n      .createQueryBuilder('subscriber')\n      .where('subscriber.subscribed = :subscribed', { subscribed: true })\n      .getMany();\n    return subscriptions.map(\n      subscription => subscription as SubscriptionResponseDto,\n    );\n  }\n\n  async save(\n    username: string,\n    token: string,\n    topic: string,\n    subscribed: boolean,\n  ): Promise {\n    const subscriber = new Subscriber();\n    subscriber.username = `${topic}-${username}`;\n    subscriber.token = token;\n    subscriber.topic = topic;\n    subscriber.subscribed = subscribed;\n    try {\n      await this.subscriberRepository.save(subscriber);\n      return true;\n    } catch (error) {\n      console.log(error);\n      throw new ConflictException(error);\n    }\n  }\n\n  async findAllTopics(): Promise {\n    try {\n      const response = await this.subscriberRepository\n        .createQueryBuilder('subscriber')\n        .select('topic')\n        .distinct(true)\n        .getRawMany();\n      const dto = new TopicsResponseDto();\n      dto.topics = response.map(obj => obj.topic);\n      return dto;\n    } catch (error) {\n      throw new ConflictException(error);\n    }\n  }\n\n  async update(username: string, subscriber: Subscriber): Promise {\n    try {\n      await this.subscriberRepository.save(subscriber);\n      return true;\n    } catch (error) {\n      throw new ConflictException(error);\n    }\n  }\n\n  async findByUsername(\n    username: string,\n  ): Promise {\n    if (!username) {\n      throw new BadRequestException('Format is incorrect');\n    }\n    try {\n      const subscriber = await this.subscriberRepository.findOne({ username });\n      if (subscriber) {\n        return subscriber as SubscriptionResponseDto;\n      }\n      return null;\n    } catch (error) {\n      throw new ConflictException(error);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SubscriptionRequestDto.html":{"url":"classes/SubscriptionRequestDto.html","title":"class - SubscriptionRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SubscriptionRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/common/dtos/subscription-request.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                subscribed\n                            \n                            \n                                token\n                            \n                            \n                                topic\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            subscribed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsBoolean()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in server/common/dtos/subscription-request.dto.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            token\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in server/common/dtos/subscription-request.dto.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            topic\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@MinLength(4)@MaxLength(20)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in server/common/dtos/subscription-request.dto.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in server/common/dtos/subscription-request.dto.ts:12\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsBoolean,\n  IsNotEmpty,\n  IsString,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class SubscriptionRequestDto {\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n\n  @IsString()\n  @IsNotEmpty()\n  token: string;\n\n  @IsString()\n  @MinLength(4)\n  @MaxLength(20)\n  topic: string;\n\n  @IsBoolean()\n  subscribed?: boolean;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SubscriptionResponseDto.html":{"url":"classes/SubscriptionResponseDto.html","title":"class - SubscriptionResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SubscriptionResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/common/dtos/subscription-response.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                subscribed\n                            \n                            \n                                token\n                            \n                            \n                                topic\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in server/common/dtos/subscription-response.dto.ts:2\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            subscribed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in server/common/dtos/subscription-response.dto.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            token\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in server/common/dtos/subscription-response.dto.ts:4\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            topic\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in server/common/dtos/subscription-response.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in server/common/dtos/subscription-response.dto.ts:3\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class SubscriptionResponseDto {\n  id: number;\n  username: string;\n  token: string;\n  topic: string;\n  subscribed: boolean;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TopicRequestDto.html":{"url":"classes/TopicRequestDto.html","title":"class - TopicRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TopicRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/common/dtos/topic-request.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                body\n                            \n                            \n                                title\n                            \n                            \n                                topic\n                            \n                            \n                                type\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            body\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@MinLength(4)@MaxLength(250)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in server/common/dtos/topic-request.dto.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@MinLength(4)@MaxLength(20)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in server/common/dtos/topic-request.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            topic\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@MinLength(4)@MaxLength(20)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in server/common/dtos/topic-request.dto.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         NotificationType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEnum(NotificationType)@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in server/common/dtos/topic-request.dto.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in server/common/dtos/topic-request.dto.ts:25\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsString, MaxLength, MinLength } from 'class-validator';\nimport { NotificationType } from '../enums';\n\nexport class TopicRequestDto {\n  @IsString()\n  @MinLength(4)\n  @MaxLength(20)\n  title: string;\n\n  @IsString()\n  @MinLength(4)\n  @MaxLength(250)\n  body: string;\n\n  @IsEnum(NotificationType)\n  @IsString()\n  type: NotificationType;\n\n  @IsString()\n  @MinLength(4)\n  @MaxLength(20)\n  topic: string;\n\n  @IsString()\n  username: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TopicsResponseDto.html":{"url":"classes/TopicsResponseDto.html","title":"class - TopicsResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TopicsResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/common/dtos/topics-response.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                topics\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            topics\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in server/common/dtos/topics-response.dto.ts:2\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class TopicsResponseDto {\n  topics: string[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            server/common/entities/user.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                currentHashedRefreshToken\n                            \n                            \n                                id\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            currentHashedRefreshToken\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in server/common/entities/user.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in server/common/entities/user.entity.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in server/common/entities/user.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in server/common/entities/user.entity.ts:10\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn, Unique } from 'typeorm';\n\n@Entity('user')\n@Unique(['username'])\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  username: string;\n\n  @Column()\n  password: string;\n\n  @Column()\n  public currentHashedRefreshToken: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                server/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                server/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                server/auth/get-user.decorator.ts\n            \n            variable\n            GetUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/auth/guards/basic-auth.strategy.ts\n            \n            guard\n            BasicAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                server/auth/guards/jwt-access-token.guard.ts\n            \n            injectable\n            JwtAccessTokenGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/auth/guards/jwt-access-token.strategy.ts\n            \n            injectable\n            JwtAccessTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                server/auth/guards/jwt-refresh-token.guard.ts\n            \n            injectable\n            JwtRefreshTokenGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/auth/guards/jwt-refresh-token.strategy.ts\n            \n            injectable\n            JwtRefreshTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                server/common/config/typeorm.config.ts\n            \n            variable\n            typeOrmMongoConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/common/config/typeorm.config.ts\n            \n            variable\n            typeOrmPostgresConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/common/dtos/multicast-request.dto.ts\n            \n            class\n            MulticastRequestDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                server/common/dtos/notification-response.dto.ts\n            \n            class\n            NotificationResponseDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                server/common/dtos/sign-in-request.dto.ts\n            \n            class\n            SignInRequestDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                server/common/dtos/sign-up.dto.ts\n            \n            class\n            SignUpDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                server/common/dtos/single-request.dto.ts\n            \n            class\n            SingleRequestDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                server/common/dtos/subscription-request.dto.ts\n            \n            class\n            SubscriptionRequestDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                server/common/dtos/subscription-response.dto.ts\n            \n            class\n            SubscriptionResponseDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                server/common/dtos/topic-request.dto.ts\n            \n            class\n            TopicRequestDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                server/common/dtos/topics-response.dto.ts\n            \n            class\n            TopicsResponseDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                server/common/entities/notification.entity.ts\n            \n            class\n            Notification\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                server/common/entities/subscriber.entity.ts\n            \n            class\n            Subscriber\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                server/common/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                server/common/interfaces.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                server/common/interfaces.ts\n            \n            interface\n            MessagePayload\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                server/common/validators/match.ts\n            \n            class\n            MatchConstraint\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                server/common/validators/match.ts\n            \n            variable\n            Match\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                server/fcm-admin-server/controllers/fcm.controller.ts\n            \n            controller\n            FcmController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                server/fcm-admin-server/controllers/notifications.controller.ts\n            \n            controller\n            NotificationsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                server/fcm-admin-server/controllers/subscribersController.ts\n            \n            controller\n            SubscribersController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                server/fcm-admin-server/services/fcm.service.ts\n            \n            injectable\n            FcmService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                server/fcm-admin-server/services/notifications.service.ts\n            \n            injectable\n            NotificationsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                server/fcm-admin-server/services/subscribers.service.ts\n            \n            injectable\n            SubscribersService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                server/next-client.controller.ts\n            \n            controller\n            NextClientController\n            \n                0 %\n                (0/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @material-ui/core : ^4.11.0\n        \n            @material-ui/icons : ^4.9.1\n        \n            @material-ui/lab : ^4.0.0-alpha.56\n        \n            @nestjs/common : ^7.5.1\n        \n            @nestjs/config : ^0.5.0\n        \n            @nestjs/core : ^7.5.1\n        \n            @nestjs/jwt : ^7.2.0\n        \n            @nestjs/passport : ^7.1.0\n        \n            @nestjs/platform-express : ^7.5.1\n        \n            @nestjs/typeorm : ^7.1.4\n        \n            @nestpress/next : ^1.2.3\n        \n            @types/bcrypt : ^3.0.0\n        \n            @types/mongodb : ^3.5.33\n        \n            axios : ^0.20.0\n        \n            bcrypt : ^5.0.0\n        \n            class-transformer : ^0.3.1\n        \n            class-validator : ^0.12.2\n        \n            cookie : ^0.4.1\n        \n            cookie-parser : ^1.4.5\n        \n            cookies : ^0.8.0\n        \n            csurf : ^1.11.0\n        \n            express-rate-limit : ^5.1.3\n        \n            firebase : ^7.24.0\n        \n            firebase-admin : ^9.3.0\n        \n            helmet : ^4.2.0\n        \n            isomorphic-unfetch : ^3.1.0\n        \n            mongodb : ^3.6.3\n        \n            next : ^9.5.5\n        \n            next-cookies : ^2.0.3\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            pg : ^8.5.0\n        \n            react : ^16.14.0\n        \n            react-dom : ^16.14.0\n        \n            react-window : ^1.8.6\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            typeorm : ^0.2.29\n        \n            uuid : ^8.3.1\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            NotificationStatus   (server/.../enums.ts)\n                        \n                        \n                            NotificationType   (server/.../enums.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    server/common/enums.ts\n    \n        \n            \n                \n                    \n                        \n                        NotificationStatus\n                    \n                \n                        \n                            \n                                 IN_PROGRESS\n                            \n                        \n                        \n                            \n                                Value : IN_PROGRESS\n                            \n                        \n                        \n                            \n                                 COMPLETED\n                            \n                        \n                        \n                            \n                                Value : COMPLETED\n                            \n                        \n                        \n                            \n                                 FAILED\n                            \n                        \n                        \n                            \n                                Value : FAILED\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        NotificationType\n                    \n                \n                        \n                            \n                                 TOPIC\n                            \n                        \n                        \n                            \n                                Value : TOPIC\n                            \n                        \n                        \n                            \n                                 MULTICAST\n                            \n                        \n                        \n                            \n                                Value : MULTICAST\n                            \n                        \n                        \n                            \n                                 SINGLE\n                            \n                        \n                        \n                            \n                                Value : SINGLE\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n    \n\n\n\n\n\n\n\n\n\n  \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\n  Nest is MIT licensed.\nfirebase-push-notifications-system\nfirebase-push-notifications-system\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FcmAdminServerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_FcmAdminServerModule\n\n\n\ncluster_FcmAdminServerModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nFcmAdminServerModule\n\nFcmAdminServerModule\n\nFcmAdminServerModule -->\n\nAuthModule->FcmAdminServerModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nJwtAccessTokenStrategy \n\nJwtAccessTokenStrategy \n\nJwtAccessTokenStrategy  -->\n\nAuthModule->JwtAccessTokenStrategy \n\n\n\n\n\nJwtRefreshTokenStrategy \n\nJwtRefreshTokenStrategy \n\nJwtRefreshTokenStrategy  -->\n\nAuthModule->JwtRefreshTokenStrategy \n\n\n\nAppModule -->\n\nFcmAdminServerModule->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtAccessTokenStrategy\n\nJwtAccessTokenStrategy\n\nAuthModule -->\n\nJwtAccessTokenStrategy->AuthModule\n\n\n\n\n\nJwtRefreshTokenStrategy\n\nJwtRefreshTokenStrategy\n\nAuthModule -->\n\nJwtRefreshTokenStrategy->AuthModule\n\n\n\n\n\nFcmService\n\nFcmService\n\nFcmAdminServerModule -->\n\nFcmService->FcmAdminServerModule\n\n\n\n\n\nNotificationsService\n\nNotificationsService\n\nFcmAdminServerModule -->\n\nNotificationsService->FcmAdminServerModule\n\n\n\n\n\nSubscribersService\n\nSubscribersService\n\nFcmAdminServerModule -->\n\nSubscribersService->FcmAdminServerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    13 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            GetUser   (server/.../get-user.decorator.ts)\n                        \n                        \n                            Match   (server/.../match.ts)\n                        \n                        \n                            typeOrmMongoConfig   (server/.../typeorm.config.ts)\n                        \n                        \n                            typeOrmPostgresConfig   (server/.../typeorm.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    server/auth/get-user.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            GetUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createParamDecorator(\n  (data, ctx: ExecutionContext): User => {\n    const req = ctx.switchToHttp().getRequest();\n    return req.user;\n  },\n)\n                        \n                    \n\n\n            \n        \n\n    server/common/validators/match.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Match\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (\n  property: string,\n  validationOptions?: ValidationOptions,\n) => {\n  return (object: any, propertyName: string) => {\n    registerDecorator({\n      target: object.constructor,\n      propertyName,\n      options: validationOptions,\n      constraints: [property],\n      validator: MatchConstraint,\n    });\n  };\n}\n                        \n                    \n\n\n            \n        \n\n    server/common/config/typeorm.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            typeOrmMongoConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     TypeOrmModuleOptions\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  type: 'mongodb',\n  url: 'mongodb://localhost/fcm_db',\n  synchronize: true,\n  useUnifiedTopology: true,\n  entities: [__dirname + '/../**/*.entity.{js,ts}'],\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            typeOrmPostgresConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     TypeOrmModuleOptions\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  type: 'postgres',\n  host: 'localhost',\n  port: 5432,\n  username: 'postgres',\n  password: 'postgres',\n  database: 'fcm_db',\n  entities: [User, Notification, Subscriber],\n  synchronize: true,\n}\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
